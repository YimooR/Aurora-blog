{"title":"Java枚举类与注解学习笔记","uid":"99f674fe5fbaafaaba3d22a30094ce34","slug":"Java/枚举类与注解","date":"2023-02-11T16:33:12.000Z","updated":"2023-02-12T03:46:01.367Z","comments":true,"path":"api/articles/Java/枚举类与注解.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVO-6GCp-41Pb5VAdprXFwlM.png","content":"<h1 id=\"枚举类与注解\"><a href=\"#枚举类与注解\" class=\"headerlink\" title=\"枚举类与注解\"></a>枚举类与注解</h1><h2 id=\"1、枚举类的使用\"><a href=\"#1、枚举类的使用\" class=\"headerlink\" title=\"1、枚举类的使用\"></a>1、枚举类的使用</h2><ul>\n<li><b style=\"color:red\">类的对象只有有限个，确定的。</b>举例如下：<ul>\n<li><strong>星期</strong>：Monday(星期一)、……、Sunday(星期天) </li>\n<li><strong>性别</strong>：Man(男)、Woman(女) </li>\n<li><strong>季节</strong>：Spring(春节)……Winter(冬天)  </li>\n<li><strong>支付方式</strong>：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银<br>行卡)、CreditCard(信用卡)</li>\n<li><strong>就职状态</strong>：Busy、Free、Vocation、Dimission</li>\n<li><strong>订单状态：</strong>Nonpayment（未付款）、Paid（已付款）、Delivered（已发货）、Return（退货）、Checked（已确认）Fulfilled（已配货）、</li>\n<li><strong>线程状态：</strong>创建、就绪、运行、阻塞、死亡</li>\n</ul>\n</li>\n<li><b style=\"color:blue\">当需要定义一组常量时，强烈建议使用枚举类</b></li>\n</ul>\n<h3 id=\"1-1-如何自定义枚举类\"><a href=\"#1-1-如何自定义枚举类\" class=\"headerlink\" title=\"1.1 如何自定义枚举类\"></a>1.1 如何自定义枚举类</h3><ul>\n<li>枚举类的实现<ul>\n<li>JDK1.5之前需要自定义枚举类</li>\n<li>JDK 1.5 新增的 enum 关键字用于定义枚举类</li>\n</ul>\n</li>\n<li>若枚举只有一个对象, 则可以作为一种单例模式的实现方式。</li>\n<li>枚举类的属性<ul>\n<li><p>枚举类对象的属性不应允许被改动, 所以应该使用 private final 修饰</p>\n</li>\n<li><p>枚举类的使用 private final 修饰的属性应该在构造器中为其赋值</p>\n</li>\n<li><p>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>自定义枚举类：</strong></p>\n<ol>\n<li>私有化类的构造器，保证不能在类的外部创建其对象</li>\n<li>在类的内部创建枚举类的实例。声明为：public static final </li>\n<li>对象如果有实例变量，应该声明为private final，并在构造器中初始化</li>\n</ol>\n<p>例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SEASONNAME</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//季节的名称</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SEASONDESC</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//季节的描述</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SEASONNAME</span> <span class=\"token operator\">=</span> seasonName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SEASONDESC</span> <span class=\"token operator\">=</span> seasonDesc<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> <span class=\"token constant\">SPRING</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"春暖花开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> <span class=\"token constant\">SUMMER</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"夏日炎炎\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> <span class=\"token constant\">AUTUMN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"秋高气爽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Season</span> <span class=\"token constant\">WINTER</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Season</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白雪皑皑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-2-如何使用关键字enum定义枚举类\"><a href=\"#1-2-如何使用关键字enum定义枚举类\" class=\"headerlink\" title=\"1.2 如何使用关键字enum定义枚举类\"></a>1.2 如何使用关键字enum定义枚举类</h3><ul>\n<li><p>使用说明</p>\n<ul>\n<li>使用 enum 定义的枚举类<span style=\"color:blue\">默认继承</span>了 java.lang.Enum类，因此不能再继承其他类</li>\n<li>枚举类的构造器只能使用 private 权限修饰符</li>\n<li>枚举类的所有实例必须在枚举类中显式列出(<strong>分隔</strong> <strong>;</strong> <strong>结尾</strong>)。列出的实例系统会<span style=\"color:blue\">自动添加 public static final </span>修饰</li>\n<li>必须在枚举类的第一行声明枚举类对象</li>\n</ul>\n</li>\n<li><p><span style=\"color:blue\">JDK 1.5 中可以在 switch 表达式中使用Enum定义的枚举类的对象作为表达式</span>, case 子句可以直接使用枚举值的名字, 无需添加枚举类作为限定。</p>\n</li>\n</ul>\n<p>例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">SeasonEnum</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function\">SPRING</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"春天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"春风又绿江南岸\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">SUMMER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"夏天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"映日荷花别样红\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">AUTUMN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秋天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"秋水共长天一色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">WINTER</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冬天\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"窗含西岭千秋雪\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SeasonEnum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> seasonName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> seasonDesc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonName <span class=\"token operator\">=</span> seasonName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seasonDesc <span class=\"token operator\">=</span> seasonDesc<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSeasonName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> seasonName<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSeasonDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> seasonDesc<span class=\"token punctuation\">;</span> \n <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-3-Enum类的主要方法\"><a href=\"#1-3-Enum类的主要方法\" class=\"headerlink\" title=\"1.3 Enum类的主要方法\"></a>1.3 Enum类的主要方法</h3><p>主要方法如下：</p>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230211234624632.png\" alt=\"image-20230211234624632\">  </p>\n<p>Enum类的主要方法：</p>\n<ul>\n<li><b style=\"color:brown\">values()方法：</b>返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</li>\n<li><b style=\"color:brown\">valueOf(String str)：</b>可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。 </li>\n<li> <b style=\"color:brown\">toString()：</b>返回当前枚举类对象常量的名称</li>\n</ul>\n<h3 id=\"1-4-实现接口的枚举类\"><a href=\"#1-4-实现接口的枚举类\" class=\"headerlink\" title=\"1.4 实现接口的枚举类\"></a>1.4 实现接口的枚举类</h3><ul>\n<li>和普通 Java 类一样，枚举类可以实现一个或多个接口</li>\n<li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。</li>\n<li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式, 则可以让每个枚举值分别来实现该方法<h2 id=\"2、注解的使用\"><a href=\"#2、注解的使用\" class=\"headerlink\" title=\"2、注解的使用\"></a>2、注解的使用</h2></li>\n</ul>\n<h3 id=\"2-1-注解-Annotation-概述\"><a href=\"#2-1-注解-Annotation-概述\" class=\"headerlink\" title=\"2.1 注解(Annotation)概述\"></a>2.1 注解(Annotation)概述</h3><ul>\n<li>从 JDK 5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是Annotation(注解) </li>\n<li>Annotation 其实就是代码里的<b style=\"color:blue\">特殊标记</b>, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation, 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。</li>\n<li>Annotation 可以像修饰符一样被使用, 可用于<b style=\"color:brown\">修饰包,类, 构造器, 方 法, 成员变量, 参数, 局部变量的声明</b>, 这些信息被保存在 Annotation 的 “name=value” 对中。</li>\n<li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗<br>代码和XML配置等。 </li>\n<li>未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说：<b style=\"color:blue\">框架 = 注解 + 反射 + 设计模式</b></li>\n</ul>\n<h3 id=\"2-2-常见的Annotation示例\"><a href=\"#2-2-常见的Annotation示例\" class=\"headerlink\" title=\"2.2 常见的Annotation示例\"></a>2.2 常见的Annotation示例</h3><ul>\n<li><p>使用 Annotation 时要在其前面增加 @ 符号, 并<b style=\"color:blue\">把该 Annotation 当成一个修饰符使用。</b>用于修饰它支持的程序元素</p>\n</li>\n<li><p><strong>示例一：生成文档相关的注解</strong></p>\n<ul>\n<li><span style=\"color:blue\">@author</span> 标明开发该类模块的作者，多个作者之间使用,分割</li>\n<li><span style=\"color:blue\">@version</span> 标明该类模块的版本</li>\n<li><span style=\"color:blue\">@see</span> 参考转向，也就是相关主题</li>\n<li><span style=\"color:blue\">@since</span> 从哪个版本开始增加的</li>\n<li><span style=\"color:blue\">@param</span> 对方法中某参数的说明，如果没有参数就不能写</li>\n<li><span style=\"color:blue\">@return</span> 对方法返回值的说明，如果方法的返回值类型是void就不能写</li>\n<li><span style=\"color:blue\">@exception</span> 对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写</li>\n<li>其中<br>@param @return 和 @exception 这三个标记都是只用于方法的。<br>@param的格式要求：@param 形参名 形参类型 形参说明<br>@return 的格式要求：@return 返回值类型 返回值说明<br>@exception的格式要求：@exception 异常类型 异常说明<br>@param和@exception可以并列多个<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>javadoc</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n@author yimoorua\n@version 1.0\n@see Math.java\n */</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JavadocTest</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">/**\n程序的主方法，程序的入口\n@param args String[] 命令行参数\n */</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token comment\">/**\n求圆面积的方法\n@param radius double 半径值\n@return double 圆的面积\n */</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> radius <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">&#125;</span> \n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong>示例二：在编译时进行格式检查(JDK内置的三个基本注解)</strong></p>\n<ul>\n<li><p><b style=\"color:brown\">@Override:</b> 限定重写父类方法, 该注解只能用于方法</p>\n</li>\n<li><p><b style=\"color:brown\">@Deprecated: </b>用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择</p>\n</li>\n<li><p><b style=\"color:brown\">@SuppressWarnings: </b>抑制编译器警告</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>javadoc</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnnotationTest</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unused\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token annotation punctuation\">@Deprecated</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>*<span class=\"token operator\">*</span>out<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"过时的方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token string\">\"重写的toString方法()\"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong>示例三：跟踪代码依赖性，实现替代配置文件功能</strong></p>\n<ul>\n<li>Servlet3.0提供了注解(annotation),使得不再需要在web.xml文件中进行Servlet的部署。<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>\n  <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>\n  <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span> \n  <span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>LoginServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>com.servlet.LoginServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span> \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>LoginServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span> \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>spring框架中关于“事务”的管理</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation<span class=\"token operator\">=</span><span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRES_NEW</span><span class=\"token punctuation\">,</span>isolation<span class=\"token operator\">=</span><span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">READ_COMMITTED</span><span class=\"token punctuation\">,</span>readOnly<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buyBook</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> isbn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//1.查询书的单价</span>\n  <span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> bookShopDao<span class=\"token punctuation\">.</span><span class=\"token function\">findBookPriceByIsbn</span><span class=\"token punctuation\">(</span>isbn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//2. 更新库存</span>\n  bookShopDao<span class=\"token punctuation\">.</span><span class=\"token function\">updateBookStock</span><span class=\"token punctuation\">(</span>isbn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//3. 更新用户的余额</span>\n  bookShopDao<span class=\"token punctuation\">.</span><span class=\"token function\">updateUserAccount</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- 配置事务属性 --></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>advice</span> <span class=\"token attr-name\">transaction-manager</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSourceTransactionManager<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>txAdvice<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>attributes</span><span class=\"token punctuation\">></span></span>\n     <span class=\"token comment\">&lt;!-- 配置每个方法使用的事务属性 --></span> \n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buyBook<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">propagation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>REQUIRES_NEW<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">isolation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>READ_COMMITTED<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">timeout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">tx:</span>attributes</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">tx:</span>advice</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-3-自定义Annotation\"><a href=\"#2-3-自定义Annotation\" class=\"headerlink\" title=\"2.3 自定义Annotation\"></a>2.3 自定义Annotation</h3><ul>\n<li>定义新的 Annotation 类型使用 <b style=\"color:blue\">@interface</b>关键字</li>\n<li>自定义注解自动继承了<b style=\"color:blue\">java.lang.annotation.Annotation接口</b></li>\n<li>Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明。其方法名和返回值定义了该成员的名字和类型。我们称为配置参数。类型只能是八种基本数据类型、<b style=\"color:blue\">String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组。 </b></li>\n<li>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始值可使用 <strong>default</strong> <strong>关键字</strong></li>\n<li>如果只有一个参数成员，建议使用<b style=\"color:blue\">参数名为value</b></li>\n<li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认值。格式是“参数名 = 参数值”，如果只有一个参数成员，且名称为value，可以省略“value=” </li>\n<li>没有成员定义的 Annotation 称为<b style=\"color:blue\">标记</b>; 包含成员变量的 Annotation 称为元数据 Annotation</li>\n</ul>\n<p><b style=\"color:Red\">注意：自定义注解必须配上注解的信息处理流程才有意义。</b></p>\n<p><strong>例：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"yimoorua\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAnnotationTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">MyAnnotationTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Annotation</span> a <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MyAnnotation</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"yimoorua\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-4-JDK中的元注解\"><a href=\"#2-4-JDK中的元注解\" class=\"headerlink\" title=\"2.4 JDK中的元注解\"></a>2.4 JDK中的元注解</h3><ul>\n<li><p>JDK 的元 Annotation 用于修饰其他 Annotation 定义</p>\n</li>\n<li><p>JDK5.0提供了4个标准的meta-annotation类型，分别是：</p>\n<ul>\n<li><b style=\"color:brown\">Retention</b></li>\n<li><b style=\"color:brown\">Target</b></li>\n<li><b style=\"color:brown\">Documented</b></li>\n<li><b style=\"color:brown\">Inherited</b></li>\n</ul>\n</li>\n</ul>\n<p>元数据的理解：<br>String name = “yimoorua”;</p>\n<p><strong>元注解：</strong></p>\n<ul>\n<li><b style=\"color:red\">@Retention: </b>只能用于修饰一个 Annotation 定义, 用于指定该 Annotation 的生命周期, @Rentention 包含一个 <b style=\"color:brown\">RetentionPolicy </b>类型的成员变量, 使用@Rentention 时必须为该 value 成员变量指定值:<ul>\n<li><b style=\"color:brown\">RetentionPolicy.SOURCE: </b>在源文件中有效（即源文件保留）,编译器直接丢弃这种策略的注释</li>\n<li><b style=\"color:brown\">RetentionPolicy.CLASS: </b>在class文件中有效（即class保留）,当运行 Java 程序时, JVM 不会保留注解。 这是默认值</li>\n<li><b style=\"color:brown\">RetentionPolicy.RUNTIME: </b>在运行时有效（即运行时保留），当运行Java程序时, JVM会保留注释。程序可以通过反射获取该注释。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230212002336646.png\" alt=\"image-20230212002336646\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token constant\">SOURCE</span><span class=\"token punctuation\">,</span>\n<span class=\"token constant\">CLASS</span><span class=\"token punctuation\">,</span>\n<span class=\"token constant\">RUNTIME</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SOURCE</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation1</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation2</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p><b style=\"color:red\">@Target: </b>用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于修饰哪些程序元素。 @Target 也包含一个名为 value 的成员变量。</p>\n<table>\n<thead>\n<tr>\n<th>取值(ElemetType)</th>\n<th></th>\n<th>取值(ElementType)</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONSTRUCTOR</td>\n<td>用于描述构造器</td>\n<td>PACKAGE</td>\n<td>用于描述包</td>\n</tr>\n<tr>\n<td>FIELD</td>\n<td>用于描述域</td>\n<td>PARAMETER</td>\n<td>用于描述参数</td>\n</tr>\n<tr>\n<td>LOCAL VARIABLE</td>\n<td>用于描述局部变量</td>\n<td>TYPE</td>\n<td>用于描述类、接口(包括注解类型）或enum声明</td>\n</tr>\n<tr>\n<td>METHOD</td>\n<td>用于描述方法</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li><p>@Documented: 用于指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。 </p>\n<ul>\n<li><span style=\"color:blue\">定义为Documented的注解必须设置Retention值为RUNTIME。 </span></li>\n</ul>\n</li>\n<li><p>@Inherited: 被它修饰的 Annotation 将具有<b style=\"color:brown\">继承性</b>。如果某个类使用了被@Inherited 修饰的 Annotation, 则其子类将自动具有该注解。</p>\n<ul>\n<li>比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解</li>\n<li>实际应用中，使用较少</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-5-利用反射获取注解信息（在反射部分涉及）\"><a href=\"#2-5-利用反射获取注解信息（在反射部分涉及）\" class=\"headerlink\" title=\"2.5 利用反射获取注解信息（在反射部分涉及）\"></a>2.5 利用反射获取注解信息（在反射部分涉及）</h3><ul>\n<li><p>JDK 5.0 在 java.lang.reflect 包下新增了<b style=\"color:red\">AnnotatedElement 接口</b>, <span style=\"color:blue\">该接口代表程序中可以接受注解的程序元素</span></p>\n</li>\n<li><p><b style=\"color:blue\">当一个Annotation类型被定义为运行时Annotation后</b>, 该注解才是运行时可见, 当 class 文件被载入时保存在 class 文件中的 Annotation 才会被虚拟机读取</p>\n</li>\n<li><p>程序可以调用 AnnotatedElement对象的如下方法来访问 Annotation 信息</p>\n</li>\n</ul>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230212003133544.png\" alt=\"image-20230212003133544\">  </p>\n<p>Java 8对注解处理提供了两点改进：<span style=\"color:red\">可重复的注解</span>及<span style=\"color:red\">可用于类型的注解</span>。此外，反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法参数上的注解。</p>\n<p><strong>可重复注解示例：</strong></p>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230212003207293.png\" alt=\"image-20230212003207293\"> </p>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230212003211468.png\" alt=\"image-20230212003211468\"> </p>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230212003215561.png\" alt=\"image-20230212003215561\">  </p>\n<h3 id=\"2-6-JDK-8中注解的新特性\"><a href=\"#2-6-JDK-8中注解的新特性\" class=\"headerlink\" title=\"2.6 JDK 8中注解的新特性\"></a>2.6 JDK 8中注解的新特性</h3><p><strong>类型注解：</strong></p>\n<ul>\n<li><p>JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：<b style=\"color:blue\">TYPE_PARAMETER,TYPE_USE。</b></p>\n</li>\n<li><p>在Java 8之前，注解只能是在声明的地方所使用，Java8开始，注解可以应用在任何地方。 </p>\n<ul>\n<li>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明）。 </li>\n<li>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestTypeDefine</span><span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@TypeDefine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">U</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">U</span> u<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@TypeDefine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE_PARAMETER</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">TypeDefine</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@MyAnnotation</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnnotationTest</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token annotation punctuation\">@MyAnnotation</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">AnnotationTest</span><span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@MyAnnotation</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@MyAnnotation</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2L</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@MyAnnotation</span>\n<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@MyAnnotation</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@MyAnnotation</span> <span class=\"token class-name\">String</span> arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token annotation punctuation\">@MyAnnotation</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE_USE</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"枚举类与注解1、枚举类的使用 类的对象只有有限个，确定的。举例如下： 星期：Monday(星期一)、……、Sunday(星期天) 性别：Man(男)、Woman(女) 季节：Spring(春节)……Winter(冬天) 支付方式：Cash（现金）、WeChatPay（微信）、Al...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%B8%8E%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">枚举类与注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1、枚举类的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE%E7%B1%BB\"><span class=\"toc-text\">1.1 如何自定义枚举类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%85%B3%E9%94%AE%E5%AD%97enum%E5%AE%9A%E4%B9%89%E6%9E%9A%E4%B8%BE%E7%B1%BB\"><span class=\"toc-text\">1.2 如何使用关键字enum定义枚举类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-Enum%E7%B1%BB%E7%9A%84%E4%B8%BB%E8%A6%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.3 Enum类的主要方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%9E%9A%E4%B8%BE%E7%B1%BB\"><span class=\"toc-text\">1.4 实现接口的枚举类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2、注解的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E6%B3%A8%E8%A7%A3-Annotation-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">2.1 注解(Annotation)概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%B8%B8%E8%A7%81%E7%9A%84Annotation%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">2.2 常见的Annotation示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E8%87%AA%E5%AE%9A%E4%B9%89Annotation\"><span class=\"toc-text\">2.3 自定义Annotation</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-JDK%E4%B8%AD%E7%9A%84%E5%85%83%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">2.4 JDK中的元注解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%B3%A8%E8%A7%A3%E4%BF%A1%E6%81%AF%EF%BC%88%E5%9C%A8%E5%8F%8D%E5%B0%84%E9%83%A8%E5%88%86%E6%B6%89%E5%8F%8A%EF%BC%89\"><span class=\"toc-text\">2.5 利用反射获取注解信息（在反射部分涉及）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-JDK-8%E4%B8%AD%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">2.6 JDK 8中注解的新特性</span></a></li></ol></li></ol></li></ol>","author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"mapped":true,"prev_post":{"title":"IDEA安装和使用教程","uid":"b4385835b600a92e333b705d67a57883","slug":"Java/idea安装","date":"2023-02-18T14:33:12.000Z","updated":"2023-02-18T15:34:24.159Z","comments":true,"path":"api/articles/Java/idea安装.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVO-6GCp-41Pb5VAdprXFwlM.png","text":"个人学习版IDEA安装使用教程1、在 IDEA 官网下载安装包并且安装在自己电脑上。 2、如果你电脑上的IDEA之前就使用过其他激活教程，那么我建议你先重置你的IDEA。这样能避免因为以前的激活补丁而导致永久激活失败，后期失效了又得折腾是很麻烦的。（Ps：新电脑新安装的IDEA无...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"feature":true},"next_post":{"title":"Java多线程学习笔记","uid":"9b430e9648b2eee98ad3a00b595936ff","slug":"Java/多线程","date":"2023-02-09T14:33:12.000Z","updated":"2023-02-12T04:06:38.652Z","comments":true,"path":"api/articles/Java/多线程.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVO-6GCp-41Pb5VAdprXFwlM.png","text":"Java多线程1、基本概念：程序、进程、线程 程序(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一 段静态的代码，静态对象。 进程(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态 的过程：有它自身的产生、存在和消亡的过程。——生...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"feature":true}}