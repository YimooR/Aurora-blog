{"title":"Java异常学习笔记","uid":"3a4f7cb185da38b5b4569400c0d1c93f","slug":"Java/异常处理","date":"2023-01-24T09:33:12.000Z","updated":"2023-02-12T04:01:57.545Z","comments":true,"path":"api/articles/Java/异常处理.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVO-6GCp-41Pb5VAdprXFwlM.png","content":"<h1 id=\"Java异常处理\"><a href=\"#Java异常处理\" class=\"headerlink\" title=\"Java异常处理\"></a>Java异常处理</h1><h2 id=\"异常概述与异常体系结构\"><a href=\"#异常概述与异常体系结构\" class=\"headerlink\" title=\"异常概述与异常体系结构\"></a>异常概述与异常体系结构</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在使用计算机语言进行项目开发的过程中，即使程序员把代码写得<b style=\"color:blue\">尽善尽美</b>，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：<b style=\"color:red\">客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅</b>等等。</p></blockquote>\n<ul>\n<li>异常：在Java语言中，将程序执行中发生的不正常情况称为“异常”。（开发过程中的语法错误和逻辑错误不是异常）</li>\n<li>Java程序在执行过程中所发生的异常事件可分为两类：<ul>\n<li><b style=\"color:blue\">Error</b>：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：<b style=\"color:red\">StackOverflowError</b>和<b style=\"color:red\">OOM</b>。一般不编写针对性的代码进行处理。</li>\n<li><b style=\"color:blue\">Exception</b>：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如：<br>✅空指针访问<br>✅试图读取不存在的文件<br>✅网络连接中断<br>✅数组角标越界</li>\n<li>对于这些错误，一般有两种解决方法：一是遇到错误就终止程序的运行。另一种方法是由程序员在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理。</li>\n<li>捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生。<br>比如：除数为0，数组下标越界等<br>分类：编译时异常和运行时异常</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/63cfb5f0588a5d166c6ca70b.png\" alt=\"图1\"><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/63cfb57d588a5d166c6bb7aa.png\" alt=\"图2\"></p>\n<p><b style=\"color:blue\">蓝色：非受检（unchecked）异常</b><br><b style=\"color:red\">红色：受检（checked）异常</b></p>\n<p><strong>1.运行时异常</strong></p>\n<ul>\n<li>是指编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程员应该积极避免其出现的异常。<b style=\"color:red\">java.lang.RuntimeException</b>类及它的子类都是运行时异常。</li>\n<li>对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。</li>\n</ul>\n<p><strong>2.编译时异常</strong></p>\n<ul>\n<li>是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。<b style=\"color:red\">编译器要求  Java程序必须捕获或声明所有编译时异常。</b></li>\n<li>对于这类异常，如果程序不处理，可能会带来意想不到的结果。</li>\n</ul>\n<h2 id=\"常见异常\"><a href=\"#常见异常\" class=\"headerlink\" title=\"常见异常\"></a>常见异常</h2><ul>\n<li>java.lang.RuntimeException<ul>\n<li>ClassCastException</li>\n<li>ArrayindexOutOfBoundsException</li>\n<li>Nul PointerException</li>\n<li>ArithmeticException</li>\n<li>NumberFormatException</li>\n<li>InputMismatchException</li>\n</ul>\n</li>\n<li>java.io.OExeption<ul>\n<li>FileNotFoundException</li>\n<li>EOFException</li>\n</ul>\n</li>\n<li>java.lang.ClassNotFoundException</li>\n<li>java.lang.InterruptedException</li>\n<li>java.io.FileNotFoundException</li>\n<li>java.sql.SQLException</li>\n</ul>\n<p><b style=\"color:red\">ArraylndexOutofBoundsException</b>示例如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IndexOutExp</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> friends<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"lisa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bily\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kessy\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>ix <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>friends<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// friends[4]?</span>\n                      <span class=\"token punctuation\">&#125;</span>\n                  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n this is the end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>程序IndexOutExp.java编译正确，运行结果：java IndexOutExp<br>  lisa<br>  bily<br>  kessy<br>  java.lang.ArraylndexOutofBoundsException<br>     at Test7_1.main(Test7_ 1.java:5)<br>  Exception in thread “main”</p>\n</div>\n<p><b style=\"color:red\">NullPointerException</b>示例如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NullRef</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">NullRef</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Nul1Ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         t <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span> <span class=\"token function\">printin</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>程序NulRef.java编译正确，运行结果：java NullRef<br>  java.lang.NullPointerException<br>          at NullRef.main(NullRef java:6)<br>  Exception in thread “main”</p>\n</div>\n<p><b style=\"color:red\">ArithmeticException</b>示例如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DivideZero</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">DivideZero</span> c<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Dividezero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      y<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token operator\">/</span>c<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"program ends ok!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>程序DivideZero.java编译正确，运行结果：java DivideZero<br>java.lang.ArithmeticException: / by zero<br>at DivideZero.main(DivideZero.java:6)<br>Exception in thread “main”</p>\n</div>\n<p><b style=\"color:red\">ClassCastException</b>示例如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">Order</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>程序Personjava编译正确，运行结果：java Person<br>  java.lang.java.lang.ClassCastException<br>   at Person.main(Person.java:5)<br>   Exception in thread “main”</p>\n</div>\n<h2 id=\"异常处理机制一：try-catch-finally\"><a href=\"#异常处理机制一：try-catch-finally\" class=\"headerlink\" title=\"异常处理机制一：try-catch-finally\"></a>异常处理机制一：try-catch-finally</h2><p><b style=\"color:blue\">在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行x/y运算时，要检测分母为0，数据为空，输入的不是数据而是字符等。过多的if-else分支会导致程序的代码加长、臃肿，可读性差。因此采用异常处理机制。</b></p>\n<p><strong>Java异常处理</strong><br>Java采用的异常处理机制，是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。</p>\n<p><b style=\"color:blue\">Java异常处理的方式：</b><br>方式一：try-catch-finally<br>方式二：throws+异常类型</p>\n<ul>\n<li>Java提供的是异常处理的抓抛模型。</li>\n<li>Java程序的执行过程中如出现异常，会生成一个异常类对象，该异常对象将被提交给Java运行时系统，这个过程称为抛出(throw)异常。</li>\n<li>异常对象的生成<br>👉由虚拟机<strong>自动生成</strong>：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出<br>👉由开发人员<strong>手动创建</strong>：<code>Exception exception = new ClassCastException()</code>;——创建好的异常对象不抛出对程序没有任何影响，和创建一个 普通对象一样</li>\n</ul>\n<p><b style=\"color:blue\">异常的抛出机制</b></p>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/63cfb57d588a5d166c6bb7c8.png\" alt=\"图3\"> </p>\n<p>为保证程序正常执行，代码必须对可能出现的异常进行处理。</p>\n<ul>\n<li>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。这一过程称为<b style=\"color:red\">捕获(catch)异常</b>。</li>\n<li>如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</li>\n<li>程序员通常只能处理Exception，而对Error无能为力。</li>\n</ul>\n<p>异常处理是通过ty-catch-finally语句实现的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//可能产生异常的代码</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">ExceptionName1</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//当产生ExceptionName1型异常时的处置措施</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">ExceptionName2</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//当产生ExceptionName2型异常时的处置措施</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token comment\">//无论是否发生异常，都无条件执行的语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>try<br>捕获异常的第一步是用try..}语句块选定捕获异常的范围，将可能出现异常的代码放在try语句块中。</li>\n<li>catch (Exceptiontype e)<br>在catch语句块中是对异常对象进行处理的代码。每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数。<br>比如：可以用 ArithmeticException 类作为参数的地方，就可以用RuntimeException类作为参数，或者用所有异常的父类Exception类作为参数。但不能是与ArithmeticException类无关的异常，如NullPointerException ( catch中的语句将不会执行)。</p>\n</div>\n<ul>\n<li>捕获异常的有关信息：<br>与其它对象一样，可以访问一个异常对象的成员变量或调用它的方法。<ul>\n<li>getMessage() 获取异常信息，返回字符串</li>\n<li>printStack Trace() 获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/63cfb57d588a5d166c6bb7ea.png\" alt=\"图4\">  </p>\n<ul>\n<li>finally<br>👉捕获异常的最后一步是通过finally语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够对程序的状态作统一的管理。<br>👉<b style=\"color:red\">不论在try代码块中是否发生了异常事件，catch语句是否执行，catch语句是否有异常，catch语句中是否有return，finally块中的语句都会被执行。</b><br>👉finally语句和catch语句是任选的。</li>\n</ul>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/63cfb55a588a5d166c6b3a46.png\" alt=\"图5\"> </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IndexOutExp</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stringt</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> friends<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"1isa\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bily\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kessy\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>friends <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token punctuation\">&#125;</span>\n                  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayIndexOutofBounds</span> <span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index err\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">&#125;</span>\n                      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n this is the end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>程序indexOutExp.java运行结果：java IndexOutExp<br>     lisa<br>     bily<br>     kessy<br>     index err<br>     this is the end</p>\n</div>\n<p>举例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DivideZero1</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n             <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n             <span class=\"token class-name\">DivideZero1</span> <span class=\"token class-name\">C</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DivideZero1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n             y<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token operator\">/</span>c<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"divide by zero error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">&#125;</span>\n             <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"program ends ok!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>程序DivideZero1运行结果：java Dividezero1<br>    divide by zero error!<br>    program ends ok!</p>\n</div>\n<p><b style=\"color:red\">练习：</b><br>编写一个类ExceptionTest，在main方法中使用try、catch、finally，要求：<br>👉在try块中，编写被零除的代码。<br>👉在catch块中，捕获被零除所产生的异常，并且打印异常信息<br>👉在finally块中，打印一条语句。</p>\n<p><strong>体会</strong></p>\n<ul>\n<li>捕获和不捕获异常，程序的运行有什么不同。</li>\n<li>体会try语句块中可能发生多个不同异常时的处理。</li>\n<li>体会finally语句块的使用。</li>\n</ul>\n<p><strong>不捕获异常时的情况</strong></p>\n<ul>\n<li>前面使用的异常都是<b style=\"color:red\">RuntimeException</b>类或是它的子类，这些类的异常的特点是：即使没有使用<strong>try</strong>和<strong>catch</strong>捕获，<strong>Java</strong>自己也能捕获，并且编译通过(但运行时会发生异常使得程序运行终止)。</li>\n<li>如果抛出的异常是IOException等类型的非运行时异常，则<b style=\"color:blue\">必须捕获，否则编译错误。</b>也就是说，我们必须处理编译时异常，将异常进行捕捉，转化为运行时异常</li>\n</ul>\n<p><strong><b style=\"color:blue\">IOException</b>异常处理举例（1）</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IOExp</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">FileInputStream</span> in<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigushk.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n         b <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         b <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong><b style=\"color:blue\">IOException</b>异常处理举例（2）</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IOExp</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token class-name\">FileInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputstream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigushk.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n             b <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b ！<span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                b <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">&#125;</span>\n             in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" It's ok!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>练习2 捕获和处理IOException异常</strong><br>编译、运行应用程序<b style=\"color:green\">IOExp.java</b>，体会Java语言中异常的捕获和处理机制。相关知识：<b style=\"color:green\">FilelnputStream</b>类的成员方法<b style=\"color:green\">read()</b>的功能是每次从相应的(本地为ASCl码编码格式)文件中读取一个字节，并转换成0~255之间的int型整数返回，到达文件末尾时则返回-1。</p>\n<h2 id=\"异常处理机制二：throws\"><a href=\"#异常处理机制二：throws\" class=\"headerlink\" title=\"异常处理机制二：throws\"></a>异常处理机制二：throws</h2><ul>\n<li>声明抛出异常是Java中处理异常的第二种方式<br>➡️如果一个方法(中的语句执行时）可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。<br>➡️在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</li>\n<li>声明抛出异常举例：<br><b style=\"color:red\">public void readFile (String file) throws FileNotFoundException {</b><br>…<br><b style=\"color:blue\">// 读文件的操作可能产生FileNotFoundException类型的异常</b><br><b style=\"color:green\">FilelnputStream fis = new FilelnputStream(file);</b><br>…}       </li>\n</ul>\n<p>举例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThrowsTest</span> <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                     <span class=\"token class-name\">ThrowsTest</span> t <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThrowsTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                           t<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">I0Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                           e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n             <span class=\"token punctuation\">&#125;</span>\n             <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//throws：抛出IO异常</span>\n                     <span class=\"token class-name\">FileInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputstream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigushk.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n                     b <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；\n                     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                         b<span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token punctuation\">&#125;</span>\n                       in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/63cfb55a588a5d166c6b3a5c.png\" alt=\"图6\"> </p>\n<p><strong>重写方法声明抛出异常的原则</strong><br>重写方法不能抛出比被重写方法范围更大的异常类型。在多态的情况下，对methodA()方法的调用-异常的捕获按父类声明的异常处理。</p>\n<p><b style=\"color:red\">public class A{</b><br><b style=\"color:red\">public void methodA() throws <b style=\"color:blue\">IOException</b> {</b><br><b style=\"color:red\">. . .</b><br><b style=\"color:red\">}}</b><br><b style=\"color:red\">public class B1 extends A{</b><br>  <b style=\"color:red\">public void methodA() throws <b style=\"color:blue\">FileNotFoundException</b>{</b><br>   <b style=\"color:red\">. . .</b><br><b style=\"color:red\">}}</b><br><b style=\"color:red\">public class B2 extends A{</b><br>   <b style=\"color:red\">public void methodA() throws <b style=\"color:blue\">Exception</b> { //报错</b><br>   <b style=\"color:red\">. . .</b><br><b style=\"color:red\">}}</b></p>\n<h2 id=\"手动抛出异常：throw\"><a href=\"#手动抛出异常：throw\" class=\"headerlink\" title=\"手动抛出异常：throw\"></a>手动抛出异常：throw</h2><p>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并抛出，也可根据需要使用人工创建并抛出。<br>➡️首先要生成异常类对象，然后通过throw语句实现抛出操作(提交给Java运行环境)。<br><b style=\"color:red\">IOException e = new IOException();</b><br><b style=\"color:red\">throw e;</b><br>➡️可以抛出的异常必须是 Throwable或其子类的实例。下面的语句在编译时将会产生语法错误：<br><b style=\"color:red\">throw new String(“want to throw”);</b></p>\n<h2 id=\"用户自定义异常类\"><a href=\"#用户自定义异常类\" class=\"headerlink\" title=\"用户自定义异常类\"></a>用户自定义异常类</h2><ul>\n<li>一般地，用户自定义异常类都是<code>RuntimeException</code>的子类。</li>\n<li>自定义异常类通常需要编写几个重载的构造器。</li>\n<li>自定义异常需要提供<code>serialVersionUI</code>。</li>\n<li>自定义的异常通过<code>throw抛出</code>。</li>\n<li>自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。</li>\n</ul>\n<p>用户自定义异常类MyException，用于描述数据取值范围错误信息。用户自己的异常类<b style=\"color:red\">必须继承</b>现有的异常类。</p>\n<p>例一：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">13465653435L</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> idnumber<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">super</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>idnumber<span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">return</span> idnumber<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>例二：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyExpTest</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">regist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MyException</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人数为负值，不合理\"</span>，<span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">else</span>\n               <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登记人数\"</span><span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">manager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token function\">regist</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>print（<span class=\"token string\">\"登记失败，出错种类\"</span><span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本次登记操作结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">MyExpTest</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyExpTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           t<span class=\"token punctuation\">.</span><span class=\"token function\">manager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span> \n         <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>总结：异常处理5个关键字</strong></p>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/63cfb55b588a5d166c6b3a92.png\" alt=\"图7\"> </p>\n","feature":true,"text":"Java异常处理异常概述与异常体系结构 在使用计算机语言进行项目开发的过程中，即使程序员把代码写得尽善尽美，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅等等。 异常：在Java语言中，将程...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">Java异常处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">异常概述与异常体系结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">常见异常</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E4%B8%80%EF%BC%9Atry-catch-finally\"><span class=\"toc-text\">异常处理机制一：try-catch-finally</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E4%BA%8C%EF%BC%9Athrows\"><span class=\"toc-text\">异常处理机制二：throws</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%EF%BC%9Athrow\"><span class=\"toc-text\">手动抛出异常：throw</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB\"><span class=\"toc-text\">用户自定义异常类</span></a></li></ol></li></ol>","author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"mapped":true,"prev_post":{"title":"搭建图床","uid":"bb71d6addb13151a6cf3720a8c5516d6","slug":"Hexo/搭建图床","date":"2023-02-02T15:11:00.000Z","updated":"2023-02-02T15:44:37.068Z","comments":true,"path":"api/articles/Hexo/搭建图床.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVOZz2AAaN5Gl77-CtWr2-Tr.png","text":"搭建图床（Typora+PicGo+阿里云OSS服务 ）安装Typora下载Typora,目前Typora支持多平台安装，进入国内官网，国外的太慢了，目前需要收费，89rmb即可拿下，若不想花钱，这里有beta版,不过还是建议大家支持正版。（根据你的电脑选择具体版本），下载完先放...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Hexo","slug":"Hexo","count":2,"path":"api/categories/Hexo.json"}],"tags":[{"name":"Hexo","slug":"Hexo","count":2,"path":"api/tags/Hexo.json"}],"author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"feature":true},"next_post":{"title":"Java泛型学习笔记","uid":"62d0949e8eed72da6db7f84008a4bde1","slug":"Java/泛型","date":"2023-01-23T07:33:12.000Z","updated":"2023-02-12T04:13:23.190Z","comments":true,"path":"api/articles/Java/泛型.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVO-6GCp-41Pb5VAdprXFwlM.png","text":"Java泛型1、为什么要有泛型(Generic) 泛型：标签 举例：中药店，每个抽屉外面贴着标签,超市购物架上很多瓶子，每个瓶子裝的是什么，有标签 泛型的设计背景集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"feature":true}}