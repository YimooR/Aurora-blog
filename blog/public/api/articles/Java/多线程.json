{"title":"Java多线程学习笔记","uid":"9b430e9648b2eee98ad3a00b595936ff","slug":"Java/多线程","date":"2023-02-09T14:33:12.000Z","updated":"2023-02-12T04:06:38.652Z","comments":true,"path":"api/articles/Java/多线程.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVO-6GCp-41Pb5VAdprXFwlM.png","content":"<h1 id=\"Java多线程\"><a href=\"#Java多线程\" class=\"headerlink\" title=\"Java多线程\"></a>Java多线程</h1><h2 id=\"1、基本概念：程序、进程、线程\"><a href=\"#1、基本概念：程序、进程、线程\" class=\"headerlink\" title=\"1、基本概念：程序、进程、线程\"></a>1、基本概念：程序、进程、线程</h2><ul>\n<li><b style=\"color:blue\">程序(program)</b>是为完成特定任务、用某种语言编写的一组指令的集合。即指一 段静态的代码，静态对象。</li>\n<li><b style=\"color:blue\">进程(process)</b>是程序的一次执行过程，或是<span style=\"color:red\">正在运行的一个程序</span>。是一个动态 的过程：有它自身的产生、存在和消亡的过程。——生命周期<ul>\n<li>如：运行中的QQ，运行中的MP3播放器</li>\n<li>程序是静态的，进程是动态的</li>\n<li><span style=\"color:red\">进程作为资源分配的单位</span>， 系统在运行时会为每个进程分配不同的内存区域</li>\n</ul>\n</li>\n<li><b style=\"color:blue\">线程(thread)</b>，进程可进一步细化为线程，是一个程序内部的一条执行路径。<ul>\n<li>若一个进程同一时间并行执行多个线程，就是支持多线程的</li>\n<li><span style=\"color:red\">线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)</span>，线程切换的开 销小</li>\n<li>一个进程中的多个线程共享相同的内存单元/内存地址空间&gt;它们从同一堆中分配对象，可以 访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资 源可能就会带来<span style=\"color:red\">安全的隐患</span>。</li>\n</ul>\n</li>\n</ul>\n<img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209143138057.png\" alt=\"image-20230209143138057\" style=\"zoom:80%;\" /> \n\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209143243081.png\" alt=\"image-20230209143243081\"> </p>\n<ul>\n<li><p><b style=\"font-size:20px\">单核CPU和多核CPU的理解</b></p>\n<ul>\n<li>单核CPU，其实是一种假的多线程，因为在一个时间单元内， 也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费 才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以 把他“挂起”(晾着他， 等他想通了， 准备好了钱， 再去收费) 。但是因为CPU时 间单元特别短，因此感觉不出来。</li>\n<li>如果是多核的话， 才能更好的发挥多线程的效率。(现在的服务器都是多核的)</li>\n<li>一个Java应用程序java.exe，其实至少有三个线程： main()主线程， gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li>\n</ul>\n</li>\n<li><p><b style=\"font-size:20px\">并行与并发</b></p>\n<ul>\n<li><strong>并行</strong>： 多个CPU同时执行多个任务。比如：多个人同时做不同的事。</li>\n<li><strong>并发</strong>：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</li>\n</ul>\n</li>\n</ul>\n<p><b style=\"font-size:20px\">使用多线程的优点</b><br><b style=\"font-size:20px\">背景：</b>以单核CPU为例， 只使用单个线程先后完成多个任务(调用多个方 法)，肯定比用多个线程来完成用的时间更短，为何仍需多线程呢？</p>\n<p><b style=\"font-size:20px\">多线程程序的优点：</b></p>\n<ol>\n<li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</li>\n<li>提高计算机系统CPU的利用率</li>\n<li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</li>\n</ol>\n<p><b style=\"font-size:20px\">何时需要多线程</b></p>\n<ul>\n<li><p>程序需要同时执行两个或多个任务。</p>\n</li>\n<li><p>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。</p>\n</li>\n<li><p>需要一些后台运行的程序时。</p>\n</li>\n</ul>\n<h2 id=\"2、线程的创建和使用\"><a href=\"#2、线程的创建和使用\" class=\"headerlink\" title=\"2、线程的创建和使用\"></a>2、线程的创建和使用</h2><p><b style=\"color:red\">注意：</b>以下程序不是多线程</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Sample</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     s<span class=\"token punctuation\">.</span><span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-1-线程的创建和启动\"><a href=\"#2-1-线程的创建和启动\" class=\"headerlink\" title=\"2.1 线程的创建和启动\"></a>2.1 线程的创建和启动</h3><ul>\n<li><p>Java语言的JVM允许程序运行多个线程，它通过<b style=\"color:brown\">java.lang.Thread</b>类来体现。</p>\n</li>\n<li><p>Thread类的特性</p>\n<ul>\n<li>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为<strong>线程体</strong></li>\n<li>通过该Thread对象的start()方法来启动这个线程，而非直接调用run()</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-Thread类\"><a href=\"#2-2-Thread类\" class=\"headerlink\" title=\"2.2 Thread类\"></a>2.2 Thread类</h3><p><strong>构造器</strong></p>\n<ul>\n<li><p><b style=\"color:brown\">Thread()：</b>创建新的Thread对象</p>\n</li>\n<li><p><b style=\"color:brown\">Thread(String threadname)：</b>创建线程并指定线程实例名</p>\n</li>\n<li><p><b style=\"color:brown\">Thread(Runnable target)：</b>指定创建线程的目标对象，它实现了Runnable接 口中的run方法</p>\n</li>\n<li><p><b style=\"color:brown\">Thread(Runnable target, String name)：</b>创建新的Thread对象</p>\n</li>\n</ul>\n<h3 id=\"2-3-API中创建线程的两种方式\"><a href=\"#2-3-API中创建线程的两种方式\" class=\"headerlink\" title=\"2.3 API中创建线程的两种方式\"></a>2.3 API中创建线程的两种方式</h3><ul>\n<li><p>JDK1.5之前创建新执行线程有两种方法：</p>\n</li>\n<li><p>继承Thread类的方式</p>\n<ol>\n<li> 定义子类继承Thread类。</li>\n<li> 子类中重写Thread类中的run方法。</li>\n<li> 创建Thread子类对象，即创建了线程对象。</li>\n<li> 调用线程对象start方法：启动线程，调用run方法。</li>\n</ol>\n<p><strong>mt子线程的创建和启动过程</strong></p>\n<img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209230434383.png\"/>  \n<br/>\n<img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209144906456.png\" alt=\"image-20230209144906456\" style=\"zoom:80%;\" /> \n<br/> \n<b style=\"color:red\">注意点</b>\n\n<ol>\n<li>如果自己手动调用run()方法，那么就只是普通方法，没有启动多线程模式。</li>\n<li>run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU 调度决定。</li>\n<li>想要启动多线程，必须调用start方法。</li>\n<li>一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上 的异常“IllegalThreadStateException”。</li>\n</ol>\n</li>\n<li><p>实现Runnable接口的方式</p>\n<ol>\n<li>定义子类，实现Runnable接口。</li>\n<li>子类中重写Runnable接口中的run方法。</li>\n<li>通过Thread类含参构造器创建线程对象。</li>\n<li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。</li>\n<li>调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2-4-继承方式和实现方式的联系与区别\"><a href=\"#2-4-继承方式和实现方式的联系与区别\" class=\"headerlink\" title=\"2.4 继承方式和实现方式的联系与区别\"></a>2.4 继承方式和实现方式的联系与区别</h3><p><span style=\"color:brown\">public class Thread extends <a href=\"mk:@MSITStore:D:/API/JDK_API_1.6_zh_中文.CHM::/java/lang/Object.html\">Object</a> implements <a href=\"mk:@MSITStore:D:/API/JDK_API_1.6_zh_中文.CHM::/java/lang/Runnable.html\">Runnable</a></span></p>\n<ul>\n<li><p><strong>区别</strong></p>\n</li>\n<li><p>继承Thread：线程代码存放Thread子类run方法中。</p>\n</li>\n<li><p>实现Runnable：线程代码存在接口的子类的run方法。</p>\n</li>\n<li><p>实现方式的好处</p>\n<ul>\n<li><p>避免了单继承的局限性</p>\n</li>\n<li><p>多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-5-Thread类的有关方法-1\"><a href=\"#2-5-Thread类的有关方法-1\" class=\"headerlink\" title=\"2.5 Thread类的有关方法(1)\"></a>2.5 Thread类的有关方法(1)</h3><ul>\n<li><span style=\"color:brown\">void start():</span>  启动线程，并执行对象的run()方法</li>\n<li><span style=\"color:brown\">run():</span>  线程在被调度时执行的操作</li>\n<li><span style=\"color:brown\">String getName():</span>  返回线程的名称</li>\n<li><span style=\"color:brown\">void setName(String name): </span>设置该线程名称</li>\n<li><span style=\"color:brown\">static Thread currentThread():</span> 返回当前线程。在Thread子类中就 是this，通常用于主线程和Runnable实现类</li>\n</ul>\n<h3 id=\"2-6-Thread类的有关方法-2\"><a href=\"#2-6-Thread类的有关方法-2\" class=\"headerlink\" title=\"2.6 Thread类的有关方法(2)\"></a>2.6 Thread类的有关方法(2)</h3><ul>\n<li><p><span style=\"color:brown\">static void yield() ：</span>线程让步</p>\n</li>\n<li><p>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</p>\n</li>\n<li><p>若队列中没有同优先级的线程，忽略此方法</p>\n</li>\n<li><p><span style=\"color:brown\">join() ：</span>当某个程序执行流中调用其他线程的 join() 方法时，调用线程将 被阻塞，直到 join() 方法加入的 join 线程执行完为止</p>\n<ul>\n<li>低优先级的线程也可以获得执行</li>\n</ul>\n</li>\n<li><p><span style=\"color:brown\">static void sleep (long millis)：</span>(指定时间:毫秒)</p>\n<ul>\n<li><p>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后 重排队。</p>\n</li>\n<li><p>抛出InterruptedException异常</p>\n</li>\n</ul>\n</li>\n<li><p><b>stop() :</b>  强制线程生命期结束，不推荐使用</p>\n</li>\n<li><p><strong>boolean isAlive()：</strong>返回boolean，判断线程是否还活着</p>\n</li>\n</ul>\n<h3 id=\"2-7-线程的调度\"><a href=\"#2-7-线程的调度\" class=\"headerlink\" title=\"2.7 线程的调度\"></a>2.7 线程的调度</h3><ul>\n<li><p><strong>调度策略</strong></p>\n<ul>\n<li><p>时间片<br><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209151150277.png\" alt=\"image-20230209151150277\">             </p>\n</li>\n<li><p><b style=\"color:red\">抢占式：高优先级的线程抢占CPU</b></p>\n</li>\n</ul>\n</li>\n<li><p><strong>Java的调度方法</strong></p>\n<ul>\n<li>同优先级线程组成先进先出队列(先到先服务)，使用时间片策略 </li>\n<li>对高优先级，使用优先调度的抢占式策略</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-8-线程的优先级\"><a href=\"#2-8-线程的优先级\" class=\"headerlink\" title=\"2.8 线程的优先级\"></a>2.8 线程的优先级</h3><ul>\n<li><strong>线程的优先级等级</strong><ul>\n<li><span style=\"color:brown\">MAX_PRIORITY：10</span></li>\n<li><span style=\"color:brown\">MIN   PRIORITY：1</span></li>\n<li><span style=\"color:brown\">NORM_PRIORITY：5</span></li>\n</ul>\n</li>\n<li><strong>涉及的方法</strong><ul>\n<li><span style=\"color:brown\">getPriority() ：</span>返回线程优先值</li>\n<li><span style=\"color:brown\">setPriority(int newPriority) ：</span>改变线程的优先级</li>\n</ul>\n</li>\n<li><strong>说明</strong><ul>\n<li>线程创建时继承父线程的优先级</li>\n<li>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-9-补充：线程的分类\"><a href=\"#2-9-补充：线程的分类\" class=\"headerlink\" title=\"2.9  补充：线程的分类\"></a>2.9  补充：线程的分类</h3><p>Java中的线程分为两类：一种是<b style=\"color:brown\">守护线程</b>，一种是<b style=\"color:brown\">用户线程</b>。</p>\n<ul>\n<li>它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开。</li>\n<li>守护线程是用来服务用户线程的，通过在start()方法前调用<b style=\"color:brown\">thread.setDaemon(true)</b>可以把一个用户线程变成一个守护线程。</li>\n<li>Java垃圾回收就是一个典型的守护线程。</li>\n<li>若JVM中都是守护线程，当前JVM将退出。</li>\n<li>形象理解：<span style=\"color:blue\"> 兔死狗烹，鸟尽弓藏</span></li>\n</ul>\n<h2 id=\"3、线程的生命周期\"><a href=\"#3、线程的生命周期\" class=\"headerlink\" title=\"3、线程的生命周期\"></a>3、线程的生命周期</h2><p><strong>JDK中用Thread.State类定义了线程的几种状态</strong><br>要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类 及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的<strong>五种状态</strong>：</p>\n<ul>\n<li><b style=\"color:brown\">新建：</b>当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li>\n<li><b style=\"color:brown\">就绪：</b>处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已 具备了运行的条件，只是没分配到CPU资源</li>\n<li><b style=\"color:brown\">运行：</b> 当就绪的线程被调度并获得CPU资源时,便进入运行状态，  run()方法定义了线程的操作和功能</li>\n<li><b style=\"color:brown\">阻塞：</b> 在某种特殊情况下，被人为挂起或执行输入输出操作时， 让出 CPU 并临时中 止自己的执行，进入阻塞状态</li>\n<li><b style=\"color:brown\">死亡：</b> 线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li>\n</ul>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209151957535.png\" alt=\"image-20230209151957535\"> </p>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209152018843.png\" alt=\"image-20230209152018843\"> </p>\n<h2 id=\"4、线程的同步\"><a href=\"#4、线程的同步\" class=\"headerlink\" title=\"4、线程的同步\"></a>4、线程的同步</h2><p><b style=\"color:red\">问题的提出</b></p>\n<ul>\n<li><p>多个线程执行的不确定性引起执行结果的不稳定</p>\n</li>\n<li><p>多个线程对账本的共享，会造成操作的不完整性，会破坏数据。<br><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209231741696.png\" alt=\"image-20230209231741696\"></p>\n</li>\n</ul>\n<p>例 题<br>模拟火车站售票程序，开启三个窗口售票。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ticket</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tick <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tick <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>currentThread <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"售出车票， tick号为： \"</span> <span class=\"token operator\">+</span> tick<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span>\n                 <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n                   <span class=\"token punctuation\">&#125;</span>\n               <span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TicketDemo</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token class-name\">Ticket</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ticket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          t1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          t2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          t3<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t3窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209152925349.png\" alt=\"image-20230209152925349\"> </p>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209152959260.png\" alt=\"image-20230209152959260\"> </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tick <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tick<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>“售出车票，tick号为：    \"<span class=\"token operator\">+</span>tick<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>  \n    <span class=\"token punctuation\">&#125;</span> \n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>多线程出现了安全问题</li>\n<li><b style=\"color:red\">问题的原因：</b><br>当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有 执行完，另一个线程参与进来执行。导致共享数据的错误。</li>\n<li>&lt;b style=”color:red”解决办法：</b><br>对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以 参与执行。</li>\n</ol>\n<h3 id=\"4-1-Synchronized的使用方法\"><a href=\"#4-1-Synchronized的使用方法\" class=\"headerlink\" title=\"4.1 Synchronized的使用方法\"></a>4.1 Synchronized的使用方法</h3><p>Java对于多线程的安全问题提供了专业的解决方式：同步机制</p>\n<ol>\n<li><p>  <b style=\"color:red\">同步代码块： </b><span style=\"color:brown\">synchronized (对象){  // 需要被同步的代码;}</span></p>\n</li>\n<li><p>synchronized还可以放在方法声明中，表示整个方法为<b style=\"color:red\">同步方法</b>。</p>\n<p> 例如：<br/></p>\n <span style=\"color:brown\">\n    public synchronized void show (String name){</span>\n      <span style=\"color:brown\">  …</span>\n <span style=\"color:brown\">}</span></li>\n</ol>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230209153506305.png\" alt=\"image-20230209153506305\"> </p>\n<h3 id=\"4-2-同步机制中的锁\"><a href=\"#4-2-同步机制中的锁\" class=\"headerlink\" title=\"4.2 同步机制中的锁\"></a>4.2 同步机制中的锁</h3><ul>\n<li><p>同步锁机制：<br>在《Thinking in Java》中，是这么说的：对于并发工作，你需要某种方式来防 止两个任务访问相同的资源 (其实就是共享资源竞争) 。  防止这种冲突的方法 就是当资源被一个任务使用时，在其上加锁。第一个访问某项资源的任务必须 锁定这项资源，使其他任务在其被解锁之前，就无法访问它了，而在其被解锁 之时，另一个任务就可以锁定并使用它了。</p>\n</li>\n<li><p>synchronized的锁是什么？</p>\n<ul>\n<li>任意对象都可以作为同步锁。所有对象都自动含有单一的锁 (监视器) 。</li>\n<li> 同步方法的锁：静态方法 (类名.class) 、非静态方法 (this)</li>\n<li> 同步代码块：自己指定，很多时候也是指定为this或类名.class<br>注意：</li>\n</ul>\n</li>\n<li><p>必须确保使用同一个资源的<b style=\"color:red\">多个线程共用一把锁</b>，这个非常重要，否则就无法保证共享资源的安全</p>\n</li>\n<li><p>一个线程类中的所有静态方法共用同一把锁 (类名.class) ，所有非静态方法共用同一把锁 (this) ，同步代码块 (指定需谨慎)</p>\n</li>\n</ul>\n<h3 id=\"4-3-同步的范围\"><a href=\"#4-3-同步的范围\" class=\"headerlink\" title=\"4.3  同步的范围\"></a>4.3  同步的范围</h3><p><strong>1、如何找问题，即代码是否存在线程安全？(非常重要)</strong><br>(1) 明确哪些代码是多线程运行的代码<br>(2) 明确多个线程是否有共享数据<br>(3) 明确多线程运行代码中是否有多条语句操作共享数据</p>\n<p><strong>2、如何解决呢？(非常重要)</strong><br>对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其 他线程不可以参与执行。<br>即所有操作共享数据的这些语句都要放在同步范围中</p>\n<p><strong>3、切记：</strong></p>\n<ul>\n<li>范围太小：没锁住所有有安全问题的代码</li>\n<li>范围太大：没发挥多线程的功能。</li>\n</ul>\n<h3 id=\"4-4-释放锁的操作\"><a href=\"#4-4-释放锁的操作\" class=\"headerlink\" title=\"4.4  释放锁的操作\"></a>4.4  释放锁的操作</h3><ul>\n<li>当前线程的同步方法、同步代码块执行结束。</li>\n<li>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、<br>该方法的继续执行。</li>\n<li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导 致异常结束。</li>\n<li>当前线程在同步代码块、同步方法中执行了线程对象的<span style=\"color:brown\">wait()</span>方法，当前线 程暂停，并释放锁。</li>\n</ul>\n<h3 id=\"4-5-不会释放锁的操作\"><a href=\"#4-5-不会释放锁的操作\" class=\"headerlink\" title=\"4.5 不会释放锁的操作\"></a>4.5 不会释放锁的操作</h3><ul>\n<li><p>线程执行同步代码块或同步方法时，程序调用<span style=\"color:brown\">Thread.sleep()、Thread.yield()</span>方法暂停当前线程的执行</p>\n</li>\n<li><p>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程 挂起，该线程不会释放锁(同步监视器)。</p>\n<ul>\n<li>应尽量避免使用suspend()和resume()来控制线程</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-6-单例设计模式之懒汉式-线程安全\"><a href=\"#4-6-单例设计模式之懒汉式-线程安全\" class=\"headerlink\" title=\"4.6 单例设计模式之懒汉式(线程安全)\"></a>4.6 单例设计模式之懒汉式(线程安全)</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n               instance<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">&#125;</span>               \n            <span class=\"token punctuation\">&#125;</span>               \n           <span class=\"token punctuation\">&#125;</span>\n              <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">&#125;</span>             \n           <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonTest</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">Singleton</span> s1<span class=\"token operator\">=</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token class-name\">Singleton</span> s2<span class=\"token operator\">=</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token operator\">==</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>      \n       <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-7-线程的死锁问题\"><a href=\"#4-7-线程的死锁问题\" class=\"headerlink\" title=\"4.7 线程的死锁问题\"></a>4.7 线程的死锁问题</h3><ul>\n<li>死锁<ul>\n<li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li>\n<li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li>\n</ul>\n</li>\n<li>解决方法<ul>\n<li>专门的算法、原则</li>\n<li>尽量减少同步资源的定义</li>\n<li>尽量避免嵌套同步</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLockTest</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">StringBuffer</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">StringBuffer</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                         <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            s2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                         <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            s2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      \n                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n             <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  s2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                  s1<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4-8-Lock-锁\"><a href=\"#4-8-Lock-锁\" class=\"headerlink\" title=\"4.8 Lock(锁)\"></a>4.8 Lock(锁)</h3><ul>\n<li><p>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</p>\n</li>\n<li><p><span style=\"color:red\">java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。</span> 锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象 加锁，线程开始访问共享资源之前应先获得Lock对象。</p>\n</li>\n<li><p>ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义， 在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReenTrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//加锁</span>\n     <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">//保证线程安全的代码;</span>\n      <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//解锁</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><span style=\"color:blue\">注意：如果同步代码有异常，要将unlock()写入finally语句块</span></p>\n<h3 id=\"4-9-synchronized-与-Lock-的对比\"><a href=\"#4-9-synchronized-与-Lock-的对比\" class=\"headerlink\" title=\"4.9  synchronized 与 Lock 的对比\"></a>4.9  synchronized 与 Lock 的对比</h3><ol>\n<li><p> Lock是显式锁(手动开启和关闭锁，别忘记关闭锁)， synchronized是 隐式锁，出了作用域自动释放</p>\n</li>\n<li><p> Lock只有代码块锁， synchronized有代码块锁和方法锁</p>\n</li>\n<li><p> 使用Lock锁， JVM将花费较少的时间来调度线程，性能更好。并且具有 更好的扩展性(提供更多的子类)</p>\n</li>\n</ol>\n<p><strong>优先使用顺序：</strong><br>Lock &gt; 同步代码块(已经进入了方法体，分配了相应资源) &gt; 同步方法 (在方法体之外)</p>\n<h2 id=\"5、线程的通信\"><a href=\"#5、线程的通信\" class=\"headerlink\" title=\"5、线程的通信\"></a>5、线程的通信</h2><p><strong>思考</strong></p>\n<p>使用两个线程打印 1-100。线程1， 线程2 交替打印</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Communication</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                   <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span>\n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><span style=\"color:brown\">wait() 与 notify() 和 notifyAll()</span><ul>\n<li>wait()：令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当      前线程排队等候其他线程调用notify()或notifyAll()方法唤醒， 唤醒后等待重新获得对监视器的所有权后才能继续执行。</li>\n<li>notify()：唤醒正在排队等待同步资源的线程中优先级最高者结束等待</li>\n<li>notifyAll ()：唤醒正在排队等待资源的所有线程结束等待.</li>\n</ul>\n</li>\n<li>这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报<br><span style=\"color:red\">java.lang.IllegalMonitorStateException</span>异常。</li>\n<li>因为这三个方法必须有锁对象调用，而任意对象都可以作为synchronized的同步锁， 因此这三个方法只能在Object类中声明。</li>\n</ul>\n<h3 id=\"5-1-wait-方法\"><a href=\"#5-1-wait-方法\" class=\"headerlink\" title=\"5.1 wait() 方法\"></a>5.1 wait() 方法</h3><ul>\n<li>在当前线程中调用方法：  对象名.wait()</li>\n<li>使当前线程进入等待(某对象)状态 ，直到另一线程对该对象发出 notify (或notifyAll) 为止。</li>\n<li>调用方法的必要条件：当前线程必须具有对该对象的监控权(加锁) 调用此方法后，当前线程将释放对象监控权 ，然后进入等待</li>\n<li>在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。</li>\n</ul>\n<h3 id=\"5-2-notify-notifyAll\"><a href=\"#5-2-notify-notifyAll\" class=\"headerlink\" title=\"5.2 notify()/notifyAll()\"></a>5.2 notify()/notifyAll()</h3><ul>\n<li>在当前线程中调用方法：  对象名.notify()</li>\n<li>功能：唤醒等待该对象监控权的一个/所有线程。</li>\n<li>调用方法的必要条件：当前线程必须具有对该对象的监控权(加锁)</li>\n</ul>\n<p>经典例题：生产者/消费者问题</p>\n<ul>\n<li>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处 取走产品，店员一次只能持有固定数量的产品(比如:20)，如果生产者试图 生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通 知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如 果店中有产品了再通知消费者来取走产品。</li>\n<li>这里可能出现两个问题：<ul>\n<li>生产者比消费者快时，消费者会漏掉一些数据没有取到。</li>\n<li>消费者比生产者快时，消费者会取相同的数据。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Clerk</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 售货员</span>\n     <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> product <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>product <span class=\"token operator\">>=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n             e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            product<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者生产了 第\"</span> <span class=\"token operator\">+</span> product <span class=\"token operator\">+</span> <span class=\"token string\">\"个产品\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>product <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n           e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者取走了第\"</span> <span class=\"token operator\">+</span>product <span class=\"token operator\">+</span> <span class=\"token string\">\"个产品\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        product<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Productor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 生产者</span>\n    <span class=\"token class-name\">Clerk</span> clerk<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Productor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Clerk</span> clerk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clerk <span class=\"token operator\">=</span> clerk<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者开始生产产品\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n     clerk<span class=\"token punctuation\">.</span><span class=\"token function\">addProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 消费者</span>\n   <span class=\"token class-name\">Clerk</span> clerk<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Clerk</span> clerk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clerk <span class=\"token operator\">=</span> clerk<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者开始取走产品\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n      clerk<span class=\"token punctuation\">.</span><span class=\"token function\">getProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Clerk</span> clerk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clerk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> productorThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Productor</span><span class=\"token punctuation\">(</span>clerk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">(</span>clerk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        productorThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        consumerThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>模拟银行取钱的问题</p>\n<ol>\n<li>定义一个Account类<br>1)该Account类封装了账户编号(String)和余额(double)两个属性<br>2)设置相应属性的getter和setter方法<br>3)提供无参和有两个参数的构造器<br>4)系统根据账号判断与用户是否匹配，需提供hashCode()和equals()方法的重写</li>\n<li>提供两个取钱的线程类：小明、小明’swife<br>1)提供了Account类的account属性和double类的取款额的属性<br>2)提供带线程名的构造器<br>3)run()方法中提供取钱的操作</li>\n<li>在主类中创建线程进行测试。考虑线程安全问题。</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accountId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> accountId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountId <span class=\"token operator\">=</span> accountId<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAccountId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> accountId<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAccountId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> accountId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountId <span class=\"token operator\">=</span> accountId<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> balance<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Account [accountId=\"</span> <span class=\"token operator\">+</span> accountId <span class=\"token operator\">+</span> <span class=\"token string\">\", balance=\"</span> <span class=\"token operator\">+</span> balance <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accountId<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> accountId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountId <span class=\"token operator\">=</span> accountId<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAccountId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> accountId<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAccountId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> accountId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountId <span class=\"token operator\">=</span> accountId<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">return</span> balance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> balance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Account [accountId=\"</span> <span class=\"token operator\">+</span> accountId <span class=\"token operator\">+</span> <span class=\"token string\">\", balance=\"</span> <span class=\"token operator\">+</span> balance <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> prime <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">=</span> prime <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>accountId <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> accountId<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> temp<span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">doubleToLongBits</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result <span class=\"token operator\">=</span> prime <span class=\"token operator\">*</span> result <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">>>></span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n         <span class=\"token class-name\">Account</span> other <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>accountId <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>accountId <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>accountId<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>accountId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">doubleToLongBits</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">doubleToLongBits</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WithDrawThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 要取款的额度</span>\n        <span class=\"token keyword\">double</span> withDraw<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">WithDrawThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> amt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>account <span class=\"token operator\">=</span> account<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>withDraw <span class=\"token operator\">=</span> amt<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> withDraw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\":取款成功，取现的金额为： \"</span> <span class=\"token operator\">+</span> withDraw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n               account<span class=\"token punctuation\">.</span><span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> withDraw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取现额度超过账户余额，取款失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"现在账户的余额为： \"</span> <span class=\"token operator\">+</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WithDrawThreadTest</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234567\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n       <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WithDrawThread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WithDrawThread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明's wife\"</span><span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> <span class=\"token number\">2800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n       t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6、JDK5-0新增线程创建方式\"><a href=\"#6、JDK5-0新增线程创建方式\" class=\"headerlink\" title=\"6、JDK5.0新增线程创建方式\"></a>6、JDK5.0新增线程创建方式</h2><h3 id=\"6-1-新增方式一：实现Callable接口\"><a href=\"#6-1-新增方式一：实现Callable接口\" class=\"headerlink\" title=\"6.1 新增方式一：实现Callable接口\"></a>6.1 新增方式一：实现Callable接口</h3><ul>\n<li><p>与使用Runnable相比，  Callable功能更强大些</p>\n<ul>\n<li>相比run()方法， 可以有返回值</li>\n<li>方法可以抛出异常</li>\n<li>支持泛型的返回值</li>\n<li>需要借助FutureTask类， 比如获取返回结果</li>\n</ul>\n</li>\n<li><p>Future接口</p>\n<ul>\n<li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</li>\n<li><span style=\"color:blue\">FutrueTask是Futrue接口的唯一的实现类</span></li>\n<li>FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-2-新增方式二：使用线程池\"><a href=\"#6-2-新增方式二：使用线程池\" class=\"headerlink\" title=\"6.2 新增方式二：使用线程池\"></a>6.2 新增方式二：使用线程池</h3><ul>\n<li>背景： 经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，<br>对性能影响很大。</li>\n<li>思路： 提前创建好多个线程，放入线程池中，使用时直接获取，使用完<br>放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交 通工具。</li>\n<li>好处：<ul>\n<li>提高响应速度 (减少了创建新线程的时间)</li>\n<li>降低资源消耗 (重复利用线程池中线程，不需要每次都创建)  </li>\n<li>便于线程管理<ul>\n<li>corePoolSize：核心池的大小</li>\n<li>maximumPoolSize：最大线程数</li>\n<li>keepAliveTime：线程没有任务时最多保持多长时间后会终止    </li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-3-线程池相关API\"><a href=\"#6-3-线程池相关API\" class=\"headerlink\" title=\"6.3 线程池相关API\"></a>6.3 线程池相关API</h3><ul>\n<li>JDK 5.0起提供了线程池相关API：<span style=\"color:blue\">ExecutorService</span> 和 <span style=\"color:blue\">Executors</span></li>\n<li>ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor<ul>\n<li>void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执行<br>Runnable</li>\n<li><T> Future<T> submit(Callable<T> task)：执行任务，有返回值， 一般又来执行<br>Callable</li>\n<li>void shutdown() ：关闭连接池</li>\n</ul>\n</li>\n<li>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池<ul>\n<li>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池         </li>\n<li>Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池       </li>\n<li>Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池</li>\n<li>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运<br>行命令或者定期地执行。</li>\n</ul>\n</li>\n</ul>\n","feature":true,"text":"Java多线程1、基本概念：程序、进程、线程 程序(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一 段静态的代码，静态对象。 进程(process)是程序的一次执行过程，或是正在运行的一个程序。是一个动态 的过程：有它自身的产生、存在和消亡的过程。——生...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">Java多线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%9A%E7%A8%8B%E5%BA%8F%E3%80%81%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">1、基本概念：程序、进程、线程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2、线程的创建和使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">2.1 线程的创建和启动</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Thread%E7%B1%BB\"><span class=\"toc-text\">2.2 Thread类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-API%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2.3 API中创建线程的两种方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">2.4 继承方式和实现方式的联系与区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-Thread%E7%B1%BB%E7%9A%84%E6%9C%89%E5%85%B3%E6%96%B9%E6%B3%95-1\"><span class=\"toc-text\">2.5 Thread类的有关方法(1)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-Thread%E7%B1%BB%E7%9A%84%E6%9C%89%E5%85%B3%E6%96%B9%E6%B3%95-2\"><span class=\"toc-text\">2.6 Thread类的有关方法(2)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7-%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">2.7 线程的调度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">2.8 线程的优先级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-9-%E8%A1%A5%E5%85%85%EF%BC%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">2.9  补充：线程的分类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">3、线程的生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%90%8C%E6%AD%A5\"><span class=\"toc-text\">4、线程的同步</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-Synchronized%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4.1 Synchronized的使用方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6%E4%B8%AD%E7%9A%84%E9%94%81\"><span class=\"toc-text\">4.2 同步机制中的锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E5%90%8C%E6%AD%A5%E7%9A%84%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">4.3  同步的范围</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E9%87%8A%E6%94%BE%E9%94%81%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4.4  释放锁的操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-5-%E4%B8%8D%E4%BC%9A%E9%87%8A%E6%94%BE%E9%94%81%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4.5 不会释放锁的操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-6-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%87%92%E6%B1%89%E5%BC%8F-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">4.6 单例设计模式之懒汉式(线程安全)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-7-%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">4.7 线程的死锁问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-8-Lock-%E9%94%81\"><span class=\"toc-text\">4.8 Lock(锁)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-9-synchronized-%E4%B8%8E-Lock-%E7%9A%84%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">4.9  synchronized 与 Lock 的对比</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">5、线程的通信</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-wait-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">5.1 wait() 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-notify-notifyAll\"><span class=\"toc-text\">5.2 notify()&#x2F;notifyAll()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81JDK5-0%E6%96%B0%E5%A2%9E%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">6、JDK5.0新增线程创建方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E6%96%B0%E5%A2%9E%E6%96%B9%E5%BC%8F%E4%B8%80%EF%BC%9A%E5%AE%9E%E7%8E%B0Callable%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">6.1 新增方式一：实现Callable接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-%E6%96%B0%E5%A2%9E%E6%96%B9%E5%BC%8F%E4%BA%8C%EF%BC%9A%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">6.2 新增方式二：使用线程池</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9B%B8%E5%85%B3API\"><span class=\"toc-text\">6.3 线程池相关API</span></a></li></ol></li></ol></li></ol>","author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"mapped":true,"prev_post":{"title":"Java枚举类与注解学习笔记","uid":"99f674fe5fbaafaaba3d22a30094ce34","slug":"Java/枚举类与注解","date":"2023-02-11T16:33:12.000Z","updated":"2023-02-12T03:46:01.367Z","comments":true,"path":"api/articles/Java/枚举类与注解.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVO-6GCp-41Pb5VAdprXFwlM.png","text":"枚举类与注解1、枚举类的使用 类的对象只有有限个，确定的。举例如下： 星期：Monday(星期一)、……、Sunday(星期天) 性别：Man(男)、Woman(女) 季节：Spring(春节)……Winter(冬天) 支付方式：Cash（现金）、WeChatPay（微信）、Al...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"feature":true},"next_post":{"title":"Java反射学习笔记","uid":"4f643f8888ac5de96f9123ba132fb3d8","slug":"Java/反射","date":"2023-02-08T12:33:12.000Z","updated":"2023-02-12T04:00:11.065Z","comments":true,"path":"api/articles/Java/反射.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVO-6GCp-41Pb5VAdprXFwlM.png","text":"Java反射机制1、Java反射机制概述1.1 Java反射（Java Reflection） Reflection (反射)是被视为动态语言的关键，反射机制允许程序在执行期 借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内 部属性及方法。 加载完...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"feature":true}}