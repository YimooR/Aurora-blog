{"title":"Linux之软件安装","uid":"0320adbbfdab8d9c75ad8f7cfd85cb84","slug":"Linux/Linux软件安装","date":"2023-01-05T12:46:00.000Z","updated":"2023-02-07T14:20:57.157Z","comments":true,"path":"api/articles/Linux/Linux软件安装.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVPCPNkBPLtLtZ8Uit4WUcTR.png","content":"<h1 id=\"第三章-软件包安装\"><a href=\"#第三章-软件包安装\" class=\"headerlink\" title=\"第三章 软件包安装\"></a>第三章 软件包安装</h1><h2 id=\"一、-软件包分类\"><a href=\"#一、-软件包分类\" class=\"headerlink\" title=\"一、 软件包分类\"></a>一、 软件包分类</h2><h3 id=\"1、-软件包分类\"><a href=\"#1、-软件包分类\" class=\"headerlink\" title=\"1、 软件包分类\"></a>1、 软件包分类</h3><ul>\n<li>源码包</li>\n<li>二进制包（脚本安装包）<h3 id=\"2、源码包\"><a href=\"#2、源码包\" class=\"headerlink\" title=\"2、源码包\"></a>2、源码包</h3><h4 id=\"2-1-源码包什么样\"><a href=\"#2-1-源码包什么样\" class=\"headerlink\" title=\"2.1 源码包什么样\"></a>2.1 源码包什么样</h4></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim hello.c</span>\n<span class=\"token comment\">#include &lt;stdio.h></span>\nint main <span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span>\n<span class=\"token builtin class-name\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world<span class=\"token entity\" title=\"\\n\">\\n</span>”);\n&#125;\n\n[root@localhost~]# rpm -ivh /mnt/cdrom/Packages/gcc-4.4.6-4.e16.i686.rpm\n\n[root@localhost~]# gcc -c hello.c\n#-c生成\"</span>.o\"头文件。这里会生成 hello.o 头文件，但是不会生成执行文件\n\n<span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># gcc -o hello hello.o</span>\n<span class=\"token comment\">#-o 生成执行文件，并制定执行文件名。这里生成的hello 就是可执行文件</span>\n\n<span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./hello</span>\nhello world\n<span class=\"token comment\">#执行hello 文件</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-2-源码包特点\"><a href=\"#2-2-源码包特点\" class=\"headerlink\" title=\"2.2 源码包特点\"></a>2.2 源码包特点</h4><p>源码包的优点是：</p>\n<ul>\n<li>开源，如果有足够的能力， 可以修改源代码</li>\n<li>可以自由选择所需的功能</li>\n<li>软件是编译安装，所以更加适合自己的系统，更加稳定也效率更高</li>\n<li>卸载方便<br>源码包有缺点吗？</li>\n<li>安装过程步骤较多，尤其安装较大的软件集合时（如 LAMP 环境搭建），容易出现拼写错误</li>\n<li>编译过程时间较长，安装比二进制安装时间长</li>\n<li>因为是编译安装，安装过程中一旦报错新手很难解决<h3 id=\"3、二进制包\"><a href=\"#3、二进制包\" class=\"headerlink\" title=\"3、二进制包\"></a>3、二进制包</h3><h4 id=\"3-1-二进制包分类\"><a href=\"#3-1-二进制包分类\" class=\"headerlink\" title=\"3.1 二进制包分类\"></a>3.1 二进制包分类</h4></li>\n<li>DPKG 包：是由 Debian Linux 所开发出来的包管理机制，通过 DPKG 包，Debian Linux就可以进行软件包管理。主要应用在 Debian 和 unbuntu 中。</li>\n<li>RPM 包：是由 Red Hat 公司所开发的包管理系统。功能强大，安裝、升级、查询和卸载都非常简单和方便。目前很多 Linux 都在使用这种包管理方式，包括 Fedora、 CentOS、SuSE 等。我们学习的是 Centos 6.3， 所以我们将要学习 RPM 包管理系统<h4 id=\"3-2-特点\"><a href=\"#3-2-特点\" class=\"headerlink\" title=\"3.2 特点\"></a>3.2 特点</h4>RPM 包的优点：</li>\n<li>包管理系统简单，只通过几个命令就可以实现包的安裝、升级、查询和卸载</li>\n<li>安装速度比源码包安裝快的多<br>RPM 包的缺点：</li>\n<li>经过编译，不再可以看到源代码</li>\n<li>功能选择不如源码包灵活</li>\n<li>依赖性。有时我们会发现需要安装软件包a时需要先安装b和c，而安装b时需要安装 d 和e。这是需要先安装d和e，再安装b和c，最后才能安装a包。比如说，我买了个漂亮的灯具，打算安装到我们家客厅，可是在安装灯具之前我们家客厅总要有顶棚吧，顶棚总要是做好了防水和刷好油漆了吧，这个装修和安装软件其实类似总要有一定的顺序的。可是有时依赖性会非常繁琐<h4 id=\"3-3-RPM包依赖\"><a href=\"#3-3-RPM包依赖\" class=\"headerlink\" title=\"3.3 RPM包依赖\"></a>3.3 RPM包依赖</h4></li>\n</ul>\n<p><img src=\"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/md-imgs/image-20230207221034061.png\" alt=\"image-20230207221034061\"></p>\n<p>1）树形依赖<br>      a——&gt;b——&gt;c</p>\n<p>2）环形依赖<br>      a——&gt;b——&gt;e——&gt;a</p>\n<p>3）函数库依赖</p>\n<p>什么是模块依赖？我们举一个例子，尝试安裝以下文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost Packages<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm -ivh mysql-connector-odbc-5.2.5-7.e17.x86_64.rpm</span>\n错误：依赖检测失败：\nlibodbe.so.20<span class=\"token punctuation\">(</span>64bit<span class=\"token punctuation\">)</span> 被 mysql-connector-odbe-5.2.5-7.e17.x86_64 需要\nLibodbeinst.so.20<span class=\"token punctuation\">(</span>64bit<span class=\"token punctuation\">)</span> 被 mysql-connector-odbe-5.2.5-7.e17.x86_64 需要<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>发现报错，需要安装 “ libodbe. so.2 “ 函数库文件，这时会发现在光盘中根本找不到这个文件。那是因为函数库没有单独成包，是包含在某一个软件包中的。而如果要知道在哪个软件包中，需要查询网站<a href=\"www.rpmfind.net\">www.rpmfind. net</a>。</p>\n<h2 id=\"二、-rpm安装\"><a href=\"#二、-rpm安装\" class=\"headerlink\" title=\"二、 rpm安装\"></a>二、 rpm安装</h2><h3 id=\"1、rpm包命名规则\"><a href=\"#1、rpm包命名规则\" class=\"headerlink\" title=\"1、rpm包命名规则\"></a>1、rpm包命名规则</h3><p><code>httpd-2.2.15-15. el6. centos. 1.i686. Tpm</code></p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>httpd</td>\n<td>软件包名</td>\n</tr>\n<tr>\n<td>2.2.15</td>\n<td>软件版本</td>\n</tr>\n<tr>\n<td>15</td>\n<td>软件发布的次数</td>\n</tr>\n<tr>\n<td>e16</td>\n<td>软件发行商。el6是 Redlat 公司发布,适合 RHEL6.x(Red Hat Enterprise Linux)和 Centos6.x           下使用</td>\n</tr>\n<tr>\n<td>i686</td>\n<td>适合的硬件平台。RPM 包可以在不同的硬件平台安装，选择适合不同 CPU 的软件版本，可以最大化的发挥 CPU 性能，所以出现了所谓的 i386(386 以上计算机都可以安装）、1586 (586以上的计算机都可以安装）、1686（奔腾II 以上计算机都可以安装，目前所有的 CPU 都是奔腾II以上，所以这个软件版本居多）、×86 64(64 位 CPU 可以安装）和 noarch（没有硬件限制）等文件名了。</td>\n</tr>\n<tr>\n<td>rpm</td>\n<td>包的扩展名。我们说过 Linux 下文件不是靠扩展名区分文件类型，也就是 Limux 中扩展名没有任何含义。可是这里怎么又出现了扩展名呢？原因很简单，如果我不把 RPM的扩展名叫做“ .rpm ”，管理员很难知道这是一个 RPM包，当然也就无法正确安装了。也就是说如果RPM 包不用“.rpm ”作为扩展名，系统可以正确识别没有问题，可是管理员很难识别这是个什么样的软件</td>\n</tr>\n</tbody></table>\n<p>包全名：如果操作的是未安装软件包，则使用包全名，而且需要注意绝对路径<br>包名：如果操作的是己经安装的软件包，则使用包名即可，系统会生产 RPM 包的数据库(/var/lib/rpm/），而且可以在任意路径下操作</p>\n<h3 id=\"2、依赖性\"><a href=\"#2、依赖性\" class=\"headerlink\" title=\"2、依赖性\"></a>2、依赖性</h3><p>已经讲过了，不再重复。</p>\n<h3 id=\"3、rpm包手工命令安裝\"><a href=\"#3、rpm包手工命令安裝\" class=\"headerlink\" title=\"3、rpm包手工命令安裝\"></a>3、rpm包手工命令安裝</h3><h4 id=\"3-1-默认安装位置\"><a href=\"#3-1-默认安装位置\" class=\"headerlink\" title=\"3.1 默认安装位置\"></a>3.1 默认安装位置</h4><table>\n<thead>\n<tr>\n<th>/etc/</th>\n<th>配置文件安装目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/usr/bin/</td>\n<td>可执行的命令安装目录</td>\n</tr>\n<tr>\n<td>/usr/lib/</td>\n<td>程序所使用的函数库保存位置</td>\n</tr>\n<tr>\n<td>/usr/share/doc/</td>\n<td>基本的软件使用手册保存位置</td>\n</tr>\n<tr>\n<td>/usr/share/man/</td>\n<td>帮助文件保存位置</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-2-RPM-包安裝\"><a href=\"#3-2-RPM-包安裝\" class=\"headerlink\" title=\"3.2 RPM 包安裝\"></a>3.2 RPM 包安裝</h4><ol>\n<li>安装命令<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>rpm - ivh 包全名<br>#注意一定是包全名。如果跟包全名的命令要注意路经，因为软伴包在光盘当中<br>选项：</p></blockquote>\n</li>\n</ol>\n<p>-i   install安装(install）<br>-v  显示更详细的信息 (verbose)<br>-h 打印#显示安装进度(hash)</p>\n<ul>\n<li>–nodeps不检测依赖性安装。软件时会检测依赖性，确定所需的底层软件是否安装。<br>如果没有安装则会报错。如果我不管依赖性，想强行安装，可以使用这个选项。注意：这样不检测依赖性安装的软件基本是不能使用的，所以不建议这样做</li>\n<li>–replacefiles 替换文件安装。如果安装软件包，可是包中部分文件己经存在，那么正常安装时           候，会报错“某个文件己经存在”从而导致软件无法安装，使用这个选项可以忽视这个报错，而覆盖安装</li>\n<li>–replacepkgs替换软件包安装。如果软件包己经安装，此选项可以把软件包重复安装一遍。</li>\n<li>–force强制安装。不管是否已经安装，都重新安装。就是–replacefiles和–replacepkgs 的综合。</li>\n<li>–test 测试安装。不会实际安裝，只是检测一下依赖性。</li>\n<li>–prefix 指定安装路径。为安装软件指定安装路径，而不使用默认安装路径。注意：如果指定了安装路径，软件没有安装到系统默认路径中的话，系统会找不到这些安装的软件，需要进行手工配置才能被系统识别。所以rpm 包我们一般都采用默认路径安装。</li>\n</ul>\n<ol start=\"2\">\n<li>服务启动<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># service 服务名 start|stop|restart|status</span>\n参数:\nstart:启动服务\nstop:停止服务\nrestart:重启服务\nstatus:查看服务状态\n<span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl restart httpd</span>\n<span class=\"token comment\">#这个命令也行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-3-RPM-包升级\"><a href=\"#3-3-RPM-包升级\" class=\"headerlink\" title=\"3.3 RPM 包升级\"></a>3.3 RPM 包升级</h4></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm -Uvh 包全名</span>\n选项:\n-U（大写）升级安装，如果没有安装过，系统直接安装。如果安装过的版本较旧，则升级到新版本<span class=\"token punctuation\">(</span>upgrade）\n<span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm - Fvh 包全名</span>\n选项:\n-F（大写）升级安装，如果没有安装过，则不会安装。必须安装有较旧版本，才能升级 <span class=\"token punctuation\">(</span>freshen<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-4-卸载\"><a href=\"#3-4-卸载\" class=\"headerlink\" title=\"3.4 卸载\"></a>3.4 卸载</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm -e 包名</span>\n选项:\n<span class=\"token parameter variable\">--nodeps</span>    <span class=\"token comment\">#不检查依赖性</span>\n<span class=\"token parameter variable\">-e</span>          <span class=\"token comment\">#卸载</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-5-查询\"><a href=\"#3-5-查询\" class=\"headerlink\" title=\"3.5 查询\"></a>3.5 查询</h4><p>1）查询软件包是否安装<br>可以查询软件包是否安装，命令格式如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm -q 包名</span>\n选项：\n-q：查询 <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>2）查询系统中的所有安装软件包<br>可以查询 Linux 系统中所有己经安装的软件包，命令格式如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm -qa</span>\n选项：\n-a:  所有 <span class=\"token punctuation\">(</span>all<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>当然，可以用管道符来查看所需的内容，比如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm -qa | grep httpd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>你会发现，使用“rpm -q 包名”只能查看这个包是否安裝，但是使用“rpm -qa grep 包名”会把包含包名称的所有包都列出来。<br>3）查询软件包的详细信息<br>可以查询己经安装的某个软件包的详细信息，命令格式如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ^<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm - qi 包名</span>\n选项：\n-i： 查询软件信息 <span class=\"token punctuation\">(</span>information<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>也可以查询还没有安装的软件包的详细信息，命令格式如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ^<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm - qip 包全名</span>\n选项：\n-p: 查询没有安装的软件包 <span class=\"token punctuation\">(</span>package<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>4）查询软件包中的文件列表<br>可以查询己经安装的软件包中的文件列表和安装的完整目录，命令格式如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm - ql 包名</span>\n选项：\n-l：列出软件包中所有的文件列表和软件所安装的目录 （list<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>那么，可以查询还没有安装的软件包中的文件列表和打算安装的位置吗？答案是可以，命令格式如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm -qlp 包全名</span>\n选项：\n-D: 查询没有安装的软件包信息 <span class=\"token punctuation\">(</span>package）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>5）查询系统文件属于哪个 RPM 包<br>既然可以知道每个 RPM 包中的文件的安装位置，那么可以查询系统文件属于哪个 RPM 包吗？当然<br>可以，不过需要注意的是，手工建立的文件是不能查询的，因为这些文件不是通过 RPM 包安装的，当然不能反向查询它属于哪个 RPM包。命令格式如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm - qf 系统文件名</span>\n选项：\n-f：查询系统文件属于哪个软件包（file<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>6）查询软件包所依赖的软件包<br>查询系统中和己经安装的软件包有依赖关系的软件包，命令格式如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm - qR 包名</span>\n选项：\n-R： 查询软件包的依赖性 <span class=\"token punctuation\">(</span>requires<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>可以查询没有安装的软件包的依赖性吗？加 “-p”选项即可。例如，查看一下还没有安装的 bind<br>软件包的依赖包，可以执行如下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm -qRp /mnt/cdrom/Packages/bind-9.8.2-0.10.rcl.el6.i686.rpm</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-6-验证\"><a href=\"#3-6-验证\" class=\"headerlink\" title=\"3.6 验证\"></a>3.6 验证</h4><p>1）基本命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#rpm -Va</span>\n选项：\n   - Va 校验本机已经安装的所有软件包\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#rpm -V 已安装的包名</span>\n选项：\n   <span class=\"token parameter variable\">-V</span> 校验指定RPM包中的文件（verify）\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#rpm -Vf 系统文件名</span>\n选项：\n   <span class=\"token parameter variable\">-Vf</span> 校验某个系统文件是否被修改<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2）验证举例</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#rpm -V httpd</span>\nS.5<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>T.            c           /etc/httpd/conf/httpd.conf\n验证内容             文件类型       文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>出现提示信息，我们来解释下最前面共有8个信息内容，是表示验证内容的。文件名前面的c是表示这是个配置文件（configuration）。最后是文件名。那么验证内容中的8个信息的具体内容如下：</p>\n<ul>\n<li>S  文件大小是否改变</li>\n<li>M  文件的类型或文件的权限（rwx）是否被改变</li>\n<li>5 文件MD5校验和是否改变（可以看成文件内容是否改变）</li>\n<li>D 设备的主从代码是否改变</li>\n<li> L 文件路径是否改变</li>\n<li> U 文件的属主（所有者）是否改变</li>\n<li> G 文件的属组是否改变</li>\n<li>T 文件的修改时间是否改变<br>Apache配置文件的文件类型是c，那么还有那些文件类型呢？</li>\n<li>c 配置文件（config file）</li>\n<li>d 普通文档（documentation）</li>\n<li>g “鬼”文件（ghost file），很少见，就是文件不应该被这个RPM包包含</li>\n<li>l 授权文件（license file）</li>\n<li>r 描述文件（read me）</li>\n</ul>\n<h4 id=\"3-7-数字证书\"><a href=\"#3-7-数字证书\" class=\"headerlink\" title=\"3.7 数字证书\"></a>3.7 数字证书</h4><p>刚刚的校验方法只能对已经安装的RPM包中的文件进行校验，但是如果PRM包本身就被动过手脚，那么校验就不能解决问题了。我们就必须使用数字证书验证了。<br>数字证书有如下特点：</p>\n<ul>\n<li>首先必须找到原厂的公钥文件，然后进行安装</li>\n<li>再安装RPM包时，会提取RPM包中的证书信息，然后和本机安装的原厂证书进行验证</li>\n<li>如果验证通过，则允许安装；如果验证不通过，则不允许安装并警告<br>1）数字证书位置<br>那么数字证书在哪里呢？其实在Centos 6.3的第一张光盘中就有，当然它默认也会放在系统中。<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll /mnt/cdrom/RPM-GPG-KEY-CentOS-6</span>\n-r--r--r-- <span class=\"token number\">2</span> root root <span class=\"token number\">1706</span> <span class=\"token number\">7</span>月    <span class=\"token number\">2</span> 04:21   /mnt/cdrom/RPM-GPG-KEY-CentOS-6\n<span class=\"token comment\">#光盘中的数字证书位置</span>\n\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll/etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span>\n-rw-r--r--. l root root <span class=\"token number\">1706</span> <span class=\"token number\">6</span>月 <span class=\"token number\">26</span> <span class=\"token number\">17</span>:29 /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6\n<span class=\"token comment\">#系统中的数字证书位置</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n2）数字证书导入<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span>\n选项：\n   <span class=\"token parameter variable\">--import</span> 导入数字证书<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n我们如何查询系统中安装好的数字证书呢？命令如下：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>bash@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm -qa | grep gpg-pubkey</span>\ngpg-pubkey-c105b9de-4e0fd3a3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"3-8-RPM包中文件的提取\"><a href=\"#3-8-RPM包中文件的提取\" class=\"headerlink\" title=\"3.8 RPM包中文件的提取\"></a>3.8 RPM包中文件的提取</h4>1）cpio命令<br>cpio命令主要有三种基本模式：“-o”模式指的是copy-out模式，就是把数据备份到文件库中；“-i”模式指的是copy-in模式，就是把数据从文件库中恢复：“-p”模式指的是复制模式，就是不把数据备份到cpio库中，而是直接复制为其他文件。命令如下：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#cpio -o[vcB] > [文件|设备]</span>\n<span class=\"token comment\">#备份</span>\n选项：\n   -o: copy-out 模式，备份\n   -v: 显示备份过程\n   -c: 使用较新的portable format存储方式\n   -B：设定输入输出块为5120bytes，而不是模式的512butes\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cpio -i[vcdu] &lt; [文件|设备]</span>\n<span class=\"token comment\">#还原</span>\n选项：\n   -i: copy-in 模式，还原\n   -v: 显示还原过程\n   -c: 使用较新的portable format存储方式\n   -d: 还原时自动新建目录\n   -u: 自动使用较新的文件覆盖较旧的文件\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#cpio -p 目标目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n举几个例子吧，先来看看使用cpio备份数据的方法，命令如下：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">例子：利用find命令找到文件，备份\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># find /etc -print | cpio -ocvB > /root/etc.cpio</span>\n<span class=\"token comment\">#利用find指定要备份/etc/目录。使用>导出到etc.cpio文件</span>\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll -h etc.cpio</span>\n-rw-r--r--. l root root 21M <span class=\"token number\">6</span>月 <span class=\"token number\">5</span> <span class=\"token number\">12</span>:29 etc.cpio\n<span class=\"token comment\">#etc.cpio 文件生成</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n再来看看如何恢复cpio的备份数据，命令如下：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#cpio -idvcu &lt; /root/etc.cpio</span>\n<span class=\"token comment\">#还原etc的备份</span>\n<span class=\"token comment\">#但是如果大家查看下当前目录/root,会发现没有生成etc目录。这是因为备份是/etc目录使用的是绝对路径,所以 恢复的数据直接恢复到了/etc系统目录中,而没有生成在/root/etc中。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n在CentOS 5. x的版本中，是可以利用上面的命令备份与恢复指定的文件。但是到CentOS6. x当中， 需要更加严谨。如果备份时使用绝对路径，则恢复的数据会直接到绝对路径指定的路径中，如果需要 把数据恢复到当前目录中，则需要使用相对路径，例如： 备份：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /etc</span>\n<span class=\"token comment\">#进入/etc目录</span>\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># find . -print | cpio -ocvB > /root/etc. cpio</span>\n<span class=\"token comment\">#利用find指定要备份/etc/目录,使用〉导出到etc. cpio文件</span>\n恢复：\n<span class=\"token punctuation\">[</span>root@localhost~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /root</span>\n<span class=\"token comment\">#回到/root目录中</span>\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir etc_test</span>\n<span class=\"token comment\">#建立恢复测试目录</span>\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd etc_test</span>\n<span class=\"token comment\">#进入测试目录,数据恢复到此</span>\n<span class=\"token punctuation\">[</span>root@localhost etc_test<span class=\"token punctuation\">]</span><span class=\"token comment\"># cpio -idvcu &lt; /root/etc. cpio</span>\n<span class=\"token comment\">#还原/etc目录的数据,因为备份时使用的是相对路径,则会还原到/root/etc_test/目录下</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n最后来演示一下cpio命令的“-p”复制模式，命令如下：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /tmp/</span>\n<span class=\"token comment\">#进入/tap目录</span>\n<span class=\"token punctuation\">[</span>root@localhost tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># nn -rf *</span>\n<span class=\"token comment\">#删除/tap目录中所有数据</span>\n<span class=\"token punctuation\">[</span>root@localhost tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir test</span>\n<span class=\"token comment\">#建立备份目录</span>\n<span class=\"token punctuation\">[</span>root@localhost tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># find /boot/ -print | cpio -p /tmp/test</span>\n<span class=\"token comment\">#备份/boot/目录到/tmp/test/目录中</span>\n<span class=\"token punctuation\">[</span>root@localhost tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># Is test/</span>\nboot\n<span class=\"token comment\">#在/test目录中备份出了boot目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n2）提取RPM包中文件<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#rpm2cpio 包全名 | cpio -idv .文件绝对路径</span>\nrpm2cpio\t←将rpm包转换为cpio格式的命令\ncpio\t←是一个标准工具,它用于创建软件档案文件和从档案文件中提取文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n举个例子，现在我假设把系统中的<code>/bin/ls</code>命令不小心误删除了，那么我可以修复回来吗？这时有两 种方法修复，要不就是使用<code>—force</code>选项覆盖安装一遍<code>coreutils-8.4-19.el6. i686</code>包，要不就可以使用<code>cpio</code>命令提取出/bin/ls命令文件，再把它拷贝到对应位置就可以了。不过我是怎么知道<code>/bin/ls</code>命令是属于<code>coreutils-8.4-19.el6.i686</code>这个软件包的呢？还记得<code>-qf</code>选项吗？命令如下： <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#rpm -qf /bin/ls</span>\ncoreutils-8.4-19.el6.i686\n<span class=\"token comment\">#査看Is文件属于哪个软件包</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n那么我们在讲RPM包中文件提取，所以我们使用第二章方法，cpio命令提取出Is命令文件，然 后拷贝到对应位置，命令如下：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv /bin/ls /root/</span>\n<span class=\"token comment\">#把/bin/ls命令移动到/root目录下,造成误删除的假象</span>\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#ls</span>\n<span class=\"token parameter variable\">-bash</span> ls: <span class=\"token builtin class-name\">command</span> not found\n<span class=\"token comment\">#这时执行ls命令,系统会报错“命令没有找到”</span>\n\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686. rpm | cpio -idv . /bin/ls</span>\n・/bin/ls\n<span class=\"token number\">24772</span> 块\n<span class=\"token comment\">#提取ls命令文件到当前目录下</span>\n\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#\tcp /root/bin/ls /bin/</span>\n<span class=\"token comment\">#把提取出来的ls命令文件复制到/bin目录下</span>\n\n<span class=\"token punctuation\">[</span>root@localhost\t~<span class=\"token punctuation\">]</span><span class=\"token comment\">#ls</span>\nanaconda-ks. cfg bin inittab install, log install, log. syslog <span class=\"token function\">ls</span>\n<span class=\"token comment\">#恭喜你,Is命令又可以正常使用了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4、rpm包在线安装（yum安装）\"><a href=\"#4、rpm包在线安装（yum安装）\" class=\"headerlink\" title=\"4、rpm包在线安装（yum安装）\"></a>4、rpm包在线安装（yum安装）</h3><h4 id=\"4-1-yum源文件解析\"><a href=\"#4-1-yum源文件解析\" class=\"headerlink\" title=\"4.1 yum源文件解析\"></a>4.1 yum源文件解析</h4>yum源配置文件保存在<code>/etc/yum.repos.d/</code>目录中，文件的扩展名一定是”*.repo” 。也就是说， yum源配置文件只要扩展名是“ *.repo ”就会生效。<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># Is /etc/yum.repos.d/</span>\nCentOS-Base.repo CentOS-Debuginfo.repo CentOS-fasttrack.repo CentOS-Media.repo CentOS-Vault.repo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n这个目录中有5个yum源配置文件，默认情况下CentOS-Base. repo文件生效。我们打开这个文 件看看，命令如下：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /etc/yum.repos.d/CentOS-Base.repo</span>\n<span class=\"token punctuation\">[</span>base<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>CentOS-<span class=\"token variable\">$re1easever</span> - Base\n<span class=\"token assign-left variable\">mirror1ist</span><span class=\"token operator\">=</span>http://mirror1ist.centos.org/?release<span class=\"token operator\">=</span><span class=\"token variable\">$releasever</span><span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">arch</span><span class=\"token operator\">=</span><span class=\"token variable\">$basearch</span><span class=\"token operator\">&amp;</span>\n<span class=\"token assign-left variable\">repo</span><span class=\"token operator\">=</span>os\n<span class=\"token assign-left variable\">baseurl</span><span class=\"token operator\">=</span>http://mirror.centos.org/centos/<span class=\"token variable\">$releasever</span>/os/<span class=\"token variable\">$basearch</span>/\n<span class=\"token assign-left variable\">gpgcheck</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">gpgkey</span><span class=\"token operator\">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6\n…省略部分输出…<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n在CentOS-Base. repo文件中有5个yum源容器，这里只列出了 base容器，其他容器和base容器类似。我们解释一下base这个容器。</li>\n<li>[base]:容器名称，一定要放在中。</li>\n<li>name：容器说明，可以自己随便写。</li>\n<li>mirrorlist：镜像站点，这个可以注释掉。</li>\n<li>baseurl：我们的yum源服务器的地址。默认是CentOS官方的yum源服务器，是可以使用的。 如果你觉得慢，则可以改成你喜欢的yum源地址。</li>\n<li>enabled：此容器是否生效，如果不写或写成enabled=l则表示此容器生效，写成enabled=0 则表示此容器不生效。</li>\n<li>gpgcheck：如果为1则表示RPM的数字证书生效；如果为0则表示RPM的数字证书不生效。</li>\n<li>gpgkey：数字证书的公钥文件保存位置。不用修改。<h4 id=\"4-2-搭建本地光盘yum源\"><a href=\"#4-2-搭建本地光盘yum源\" class=\"headerlink\" title=\"4.2 搭建本地光盘yum源\"></a>4.2 搭建本地光盘yum源</h4>第一步：放入CentOS安装光盘，并挂载光盘到指定位置。命令如下：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir /mnt/cdrom</span>\n<span class=\"token comment\">#创建cdrom目录,作为光盘的挂载点</span>\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mount /dev/cdrom /mnt/cdrom/</span>\nmount: block device /dev/srO is write-protected, mounting read-only\n<span class=\"token comment\">#挂载光盘到/rnnt/cdrom目录下</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n第二步：修改其他几个yum源配置文件的扩展名，让它们失效，因为只有扩展名是“ *.repo ”的 文件才能作为yum源配置文件。当然也可以删除其他几个yum源配置文件，但是如果删除了，当你 又想用网络作为yum源时，就没有了参考文件，所以最好还是修改扩展名。命令如下： <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /etc/yum.repos.d/</span>\n<span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv CentOS-Base.repo CentOS-Base.repo.bak</span>\n<span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv CentOS-Debuginfo.repo CentOS-Debuginfo. repo.bak</span>\n<span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv CentOS-Vault.repo CentOS-Vault.repo.bak</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n第三步：修改光盘yum源配置文件CentOS-Media. repo,参照以下方法修改: <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim CentOS-Media.repo</span>\n<span class=\"token punctuation\">[</span>c6-media<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>CentOS-<span class=\"token variable\">$re1easever</span> - Media\n<span class=\"token assign-left variable\">baseurl</span><span class=\"token operator\">=</span>file:///mnt/cdrom\n<span class=\"token comment\">#地址为你自己的光盘挂载地址</span>\n<span class=\"token comment\">#              file:///media/cdrom/</span>\n<span class=\"token comment\">#              file:///media/cdrecorder/</span>\n<span class=\"token comment\">#注释这两个不存在的地址</span>\n<span class=\"token assign-left variable\">gpgcheck</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">enabled</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token comment\">#把enabled=0改为enabled=1,让这个yum源配置文件生效</span>\n<span class=\"token assign-left variable\">gpgkey</span><span class=\"token operator\">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n配置完成，现在可以感受一下yum的便捷了。</li>\n</ul>\n<h4 id=\"4-3-yum命令\"><a href=\"#4-3-yum命令\" class=\"headerlink\" title=\"4.3 yum命令\"></a>4.3 yum命令</h4><p>1）査询</p>\n<ul>\n<li>査询yum源服务器上所有可安装的软件包列表。<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum list</span>\n<span class=\"token comment\">#査询所有可用软件包列表</span>\nInstalled Packages\n<span class=\"token comment\">#己经安装的软件包</span>\nConsoleKit.i686 <span class=\"token number\">0.4</span>.1-3.el6 @anaconda-Cent0S-201207051201.1386/6.3\nConsoleKit-libs.i686 <span class=\"token number\">0.4</span>.1-3.el6 @anaconda-Cent0S-201207051201.i386/6.3 <span class=\"token punctuation\">..</span>.省略部分输出<span class=\"token punctuation\">..</span>. Available Packages <span class=\"token comment\">#还可以安装的软件包 </span>\n<span class=\"token number\">389</span>-ds-base.i686 \n<span class=\"token number\">389</span>-ds-base-deve1.i686\n<span class=\"token comment\">#软件名</span>\n<span class=\"token punctuation\">..</span>.省略部分输出<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>査询yum源服务器中是否包含某个软件包。<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum list 包名</span>\n<span class=\"token comment\">#査询单个软件包</span>\n例如：\n<span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum list samba</span>\nAvailable Packages\nsamba.i686\t<span class=\"token number\">3.5</span>.10-125.el6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>搜索yum源服务器上所有和关键字相关的软件包。<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum search 关键字</span>\n<span class=\"token comment\">#搜索服务器上所有和关键字相关的软件包</span>\n例如：\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum search ifconfig</span>\n己加载插件：fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span> 匹 配 <span class=\"token builtin class-name\">:</span> <span class=\"token function\">ifconfig</span> net-tools.x86_64 <span class=\"token builtin class-name\">:</span> Basic networking tools<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\nyum search搜索可以用于确定某个软件在哪个相关包当中。此例子可以确定“ifconfig”命令 需要安装”net-tools”包。</li>\n<li>査询指定软件包的信息。<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum info samba </span>\n<span class=\"token comment\">#查询samba软件包的信息</span>\nAvailable Packages\t←还没有安装\nName\t:samba\t    ←包名\nArch\t:i686\t    ←适合的硬件平台\nVersion\t:3.5.10     ←版本\nRelease\t:125.el6    ←发布版本\nSize\t:4.9 M\t    ←大小\nRepo\t:c6-media   ←在光盘上\n…省略部分输出…\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n2）安装<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum -y install 包名 </span>\n选项：\n  <span class=\"token function\">install</span>\t安装\n  <span class=\"token parameter variable\">-y</span>\t自动回答yes。如果不加-y,那么每个安装的软件都需要手工回答yes\n例如：\n<span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum -y install gcc</span>\n<span class=\"token comment\">#使用yum自动安装gcc</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n3）升级<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum -y update 包名</span>\n<span class=\"token comment\">#升级指定的软件包</span>\n选项：\nupdate：\t升级\n-y：\t自动回答yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><strong>注意</strong>：在进行升级操作时，yum源服务器中软件包的版本要比本机安装的软件包的版本高。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost yum.repos.d<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum -y update</span>\n<span class=\"token comment\">#升级本机所有软件包</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这条命令会升级系统中所有的软件包。不过我们的生产服务器是稳定优先的，所以这种全系统升 级的情况并不多见。<br>4）卸载<br>再次强调一下，除非你确定卸载的软件的依赖包不会对系统产生影响，否则不要执行yum的卸载, 因为很有可能在卸载软件包的同时卸载的依赖包也是重要的系统文件，这就有可能导致系统崩溃。卸 载命令如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@localhost yum.repos.d]# yum remove 包名 \n#卸载指定的软件包\n例如：\n[root@localhost yum.repos.d]# yum remove samba \n#卸载samba软件包<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-4-yum组管理命令\"><a href=\"#4-4-yum组管理命令\" class=\"headerlink\" title=\"4.4 yum组管理命令\"></a>4.4 yum组管理命令</h4><ul>\n<li><p>查询可以安装的软件组</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost yum grouplist\n<span class=\"token comment\">#列出所有可用的软件组列表</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>查询软件组内包含的软件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum groupinfo 软件组名</span>\n<span class=\"token comment\">#列出软件组中包含的软件 </span>\n例如：\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum groupinfo \"Web Server*</span>\n<span class=\"token comment\">#査询软件组”Web Server”中包含的软件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>安装软件组</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum groupins tall 软件组名</span>\n<span class=\"token comment\">#安装指定软件组,组名可以由grouplist査询出来 </span>\n例如：\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum groupins tall \"Web Server*</span>\n<span class=\"token comment\">#安装网页服务软件组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>卸载软件组</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum groupremove 软件组名</span>\n<span class=\"token comment\">#卸载指定软件组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"三、源码包安装\"><a href=\"#三、源码包安装\" class=\"headerlink\" title=\"三、源码包安装\"></a>三、源码包安装</h2><h3 id=\"1、注意事项\"><a href=\"#1、注意事项\" class=\"headerlink\" title=\"1、注意事项\"></a>1、注意事项</h3><h4 id=\"1-1-应该选择哪种软件包？\"><a href=\"#1-1-应该选择哪种软件包？\" class=\"headerlink\" title=\"1.1 应该选择哪种软件包？\"></a>1.1 应该选择哪种软件包？</h4></li>\n<li><p>如果软件包是给大量客户提供访问，建议使用源码包安装，如LAMP环境搭建，因为源码包效率更</p>\n</li>\n<li><p>如果软件包是给Linux底层使用，或只给少量客户访问，建议使用rpm包安装，因为rpm包简单。</p>\n<h4 id=\"1-2-源码包是从哪里来的？\"><a href=\"#1-2-源码包是从哪里来的？\" class=\"headerlink\" title=\"1.2 源码包是从哪里来的？\"></a>1.2 源码包是从哪里来的？</h4><p>rpm包是光盘中直接包含的，所以不需要用户单独下载。而源码包是通过官方网站下载的，如果需要 使用，是需要单独下载的。</p>\n<h4 id=\"1-3-是否可以在系统中即安装rpm包的Apache-又安装源码包的Apache\"><a href=\"#1-3-是否可以在系统中即安装rpm包的Apache-又安装源码包的Apache\" class=\"headerlink\" title=\"1.3 是否可以在系统中即安装rpm包的Apache,又安装源码包的Apache?\"></a>1.3 是否可以在系统中即安装rpm包的Apache,又安装源码包的Apache?</h4><p>答案是可以，因为两种安装方法安装的Apache，安装位置是不一样的，例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">RPM包：不建议指定安装位置的，建议安装在默认位置<span class=\"token punctuation\">(</span>RPM包安装的服务有标准卸载命令，不怕文 件到处安装<span class=\"token punctuation\">)</span>\n配置文件：\t/etc/httpd/conf/httpd. conf\n网页位置：\t/var/www/html/\n日志位置：\t/var/log/httpd/\n启动方法：\t<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">service</span> httpd restart\n           <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> /etc/rc.d/init.d/httpd restart\n源码包：必须制定安装位置<span class=\"token punctuation\">(</span>源码包没有安装数据库，没有删除命令<span class=\"token punctuation\">)</span>\n配置文件：\t/usr/local/apache2/conf/httpd.conf\n网页文件：\t/usr/local/apache2/htdocs/\n日志位置：\t/usr/local/apache2/logs/\n启动方法：\t/usr/local/apache2/bin/apachectl start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1-4-生产服务器上，是否会同时安装两种Apache\"><a href=\"#1-4-生产服务器上，是否会同时安装两种Apache\" class=\"headerlink\" title=\"1.4 生产服务器上，是否会同时安装两种Apache?\"></a>1.4 生产服务器上，是否会同时安装两种Apache?</h4><p>当然不会啊，因为系统中只有一个80端口，所以你只能启动一个Apache，装多个只能浪费资源。我们建议安装源码包的Apache。</p>\n<h3 id=\"2、安装过程\"><a href=\"#2、安装过程\" class=\"headerlink\" title=\"2、安装过程\"></a>2、安装过程</h3><p>我们来解释一下源码包安装的具体步骤。<br>(1)下载软件包。<br>(2)解压缩。<br>(3)进入解压目录。<br>(4)./configure    编译前准备<br>这一步主要有三个作用：</p>\n</li>\n<li><p>在安装之前需要检测系统环境是否符合安装要求。</p>\n</li>\n<li><p>定义需要的功能选项。<code>/configure</code>支持的功能选项较多，可以执行<code>./configure-help</code> 命令查询其支持的功能。一般都会通过<code>./configure-prefix=安装路径</code>来指定安装路径。</p>\n</li>\n<li><p>把系统环境的检测结果和定义好的功能选项写入Makefile文件,后续的编译和安装需要依 赖这个文件的内容。<br>需要注意的是<code>.configure</code>不是系统命令，而是源码包软件自带的一个脚本程序，所以必须采用 <code>./configure</code>方式执行(<code>./</code>代表在当前目录下).<br>(5)make    编译<br>make会调用gcc编译器，并读取Makefile文件中的信息进行系统软件编译。编译的目的就是把源码程序转变为能被Linux识别的可执行文件，这些可执行文件保存在当前目录下。编译过程较为耗时，需要有足够的耐心。<br>(6)make clean：清空编译内容(非必需步骤)。<br>如果在“./configure”或“make”编译中报错，那么我们在重新执行命令前一定要记得执行make clean命令，它会清空Makefile文件或编译产生的”.o”头文件。<br>(7)make install：编译安装<br>这才是真正的安装过程，一般会写清楚程序的安装位置。如果忘记指定安装目录，则可以把这个 命令的执行过程保存下来，以备将来删除使用。</p>\n</li>\n</ul>\n<h3 id=\"3、删除\"><a href=\"#3、删除\" class=\"headerlink\" title=\"3、删除\"></a>3、删除</h3><p>源码包没有删除命令，如果需要删除，直接删除安装目录即可.</p>\n<h3 id=\"4、打入补丁\"><a href=\"#4、打入补丁\" class=\"headerlink\" title=\"4、打入补丁\"></a>4、打入补丁</h3><h4 id=\"4-1-补丁的生成\"><a href=\"#4-1-补丁的生成\" class=\"headerlink\" title=\"4.1 补丁的生成\"></a>4.1 补丁的生成</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># diff 选项 old new</span>\n<span class=\"token comment\">#比较old和new文件的不同</span>\n选项：\n<span class=\"token parameter variable\">-a</span>\t将任何文档当做文本文档处理\n<span class=\"token parameter variable\">-b</span>\t忽略空格造成的不同\n<span class=\"token parameter variable\">-B</span>\t忽略空白行造成的不同\n<span class=\"token parameter variable\">-I</span>\t忽略大小写造成的不同\n<span class=\"token parameter variable\">-N</span>\t当比较两个目录时，如果某个文件只在一个目录中，则在另一个目录中视作空文件\n<span class=\"token parameter variable\">-r</span>\t当比较目录时，递归比较子目录\n<span class=\"token parameter variable\">-u</span>\t使用同一的输出格式<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>举例</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir test</span>\n<span class=\"token comment\">#建立测试目录</span>\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd test</span>\n<span class=\"token comment\">#进入测试目录</span>\n<span class=\"token punctuation\">[</span>root@localhost test<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi old.txt</span>\nour\nschool\nis\nfake\n<span class=\"token comment\">#文件 old.txt,为了一会输出便于比较,每行分开</span>\n<span class=\"token punctuation\">[</span>root@localhost test<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi new.txt</span>\nour\nschool\nis\nfake\n<span class=\"token keyword\">in</span>\nchendu\n<span class=\"token comment\">#文件 new.txt</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>比较下两个文件的不同，并生成补丁文件“txt.patch”,命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost test<span class=\"token punctuation\">]</span><span class=\"token comment\"># diff -Naur /root/test/old.txt /root/test/new.txt > txt.patch #比较两个文件的不同,同时生成txt.patch补丁文件</span>\n<span class=\"token punctuation\">[</span>root@localhost test<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi txt.patch</span>\n<span class=\"token comment\">#査看下这个文件</span>\n-- /root/test/old.txt <span class=\"token number\">2022</span>-11-23 05:51:14.347954373 +0800\n<span class=\"token comment\">#前一个文件</span>\n+++ /root/test/new.txt <span class=\"token number\">2022</span>-11-23 05:50:05.772988210 +0800\n<span class=\"token comment\">#后一个文件</span>\n@@ -2,3 +2,5 @@\nschool\nis\natguigu\n+in\n+beijing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>#后一个文件比前一个文件多两行（+表示）</p>\n<h4 id=\"4-2-打入补丁\"><a href=\"#4-2-打入补丁\" class=\"headerlink\" title=\"4.2 打入补丁\"></a>4.2 打入补丁</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost test<span class=\"token punctuation\">]</span><span class=\"token comment\"># patch - pn &lt; 补丁文件</span>\n<span class=\"token comment\">#按照补丁文件进行更新 </span>\n选项：\n<span class=\"token parameter variable\">-pn</span>\tn为数字。代表按照补丁文件中的路径，指定更新文件的位置。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>-pn</code> 不好理解，我们说明下。补丁文件是要打入旧文件的，但是你当前所在的目录和补丁文件中的记录的目录是不一定匹配的，所以就需要<code>-pn</code>来同步两个目录。<br>比如我当前是在<code>/root/test</code>目录中（我要打补丁的旧文件就在当前目录下），补丁文件中记录的文件目录为<code>/root/test/old.txt</code>，这时如果写入<code>-pl</code>（在补丁文件目录中取消一级目录） 那么补丁文件就会打入<code>/root/test/root/test/old.txt</code>文件中，这显然是不对的。那如果写入的 是<code>-p2</code>（在补丁文件目录中取消二级目录）那么补丁文件打入的就是<code>/root/test/test/old.txt</code>， 这显然也不对。如果写入的是<code>-p3</code>（在补丁文件目录中取消三级目录）那么补丁文件就是打入的 <code>/root/test/old・txt</code> ,我们的old.txt文件就在这个目录下，所以就应该是<code>-p3</code>。<br>那么我们更新下“old. txt”文件，命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost test<span class=\"token punctuation\">]</span><span class=\"token comment\"># patch -p3 &lt; txt.patch </span>\npatching <span class=\"token function\">file</span> old.txt \n<span class=\"token comment\">#给old.txt文件打补丁</span>\n<span class=\"token punctuation\">[</span>root@localhost test<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat old.txt</span>\n<span class=\"token comment\">#査看下old.txt的内容吧。</span>\nour\nschool\nis\nfake\n<span class=\"token keyword\">in</span>\nchendu\n<span class=\"token comment\">#多出来了 in chendu两行</span>\n<span class=\"token comment\">## 四、脚本安装程序</span>\n<span class=\"token comment\">### 1、脚本程序简介</span>\n脚本程序包并不多见，所以在软件包分类中并没有把它列为一类。它更加类似于Windows下的程序安装，有一个可执行的安装程序，只要运行安装程序，然后进行简单的功能定制选择（比如指定安 装目录等），就可以安装成功，只不过是在字符界面下完成的。\n目前常见的脚本程序以各类硬件的驱动居多，我们需要学习一下这类软件的安装方式，以备将来不时之需。\n<span class=\"token comment\">### 2、Webmin 安装</span>\n<span class=\"token comment\">#### 2.1.简介</span>\n我们来看看脚本程序如何安装和使用。安装一个叫作Webmin的工具软件，Webmin是一个基于 Web的系统管理界面。借助任何支持表格和表单的浏览器（和File Manager模块所需要的Java）,你 就可以设置用户账号、apache、DNS、文件共享等。Webmin包括一个简单的Web服务器和许多CGI 程序，这些程序可以直接修改系统文件，比如<span class=\"token variable\"><span class=\"token variable\">`</span>/etc/inetd.conf<span class=\"token variable\">`</span></span>和<span class=\"token variable\"><span class=\"token variable\">`</span>/etc/passwd<span class=\"token variable\">`</span></span>。Web服务器和所有的CGI 程序都是用Perl <span class=\"token number\">5</span>编写的，没有使用任何非标准Perl模块。也就是说，Webmin是一个用Perl语言写 的、可以通过浏览器管理Linux的软件。\n\n<span class=\"token comment\">#### 2.2.安装步骤</span>\n首先下载 Webmin 软件，地址为 http://sourcefoige.net/projects/webadmin/files/webmin/ ，这里下载的是 webmin-1.610.tar.gZ。\n接下来解压缩软件，命令如下：\n​```bash\n<span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar -zxvf webmin-1.610.tar.gz</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>进入解压目录，命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd webmin-1.610</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行安装程序setup.sh,并指定功能选项，命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@localhost webmin-1.610<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./setup.sh</span>\n***********************************************************************\n*              welcome to the webmin setup script,version <span class=\"token number\">1.610</span>       *\n*********************************************************************** \nwebmin is web-based interface that allows Unix-like operating systems and common Unix <span class=\"token function\">service</span> to be easily administered.\nInstalling Webmin <span class=\"token keyword\">in</span> /root/webmin-1.610 <span class=\"token punctuation\">..</span>.\n**********************************************************************\nwebmin uses separate directories <span class=\"token keyword\">for</span> configuration files and log files.\nUnless you want to run multiple versions of webmin at the same <span class=\"token function\">time</span> you can just accept the defaults.\n\nConfig <span class=\"token function\">file</span> directory <span class=\"token punctuation\">[</span>/etc/webmin<span class=\"token punctuation\">]</span>:\n<span class=\"token comment\">#选择安装位置，默认安装在/etc/webmin目录下。如果安装到默认位置，则直接回车</span>\nLog <span class=\"token function\">file</span> directory <span class=\"token punctuation\">[</span>/var/webmin<span class=\"token punctuation\">]</span>:\n\n<span class=\"token comment\">#日志文件保存位置,直接回车,选择默认位直</span>\n********************************************************************\nWebmin is written entirely <span class=\"token keyword\">in</span> Perl.Please enter the full path to the\nPerl <span class=\"token number\">5</span> interpreter on your system.\n\nFull path to perl <span class=\"token punctuation\">(</span>default /usr/bin/perl<span class=\"token punctuation\">)</span>:\n<span class=\"token comment\">#指定Perl语言的安装位置,直接回车,选择默认位置,Perl默认就安装在这里</span>\nTesting Perl <span class=\"token punctuation\">..</span>.\nPerl seems to be installed ok\n*********************************************************************\nOperating system name: CentOS Linux\nOperating system version: <span class=\"token number\">6.3</span>\n*********************************************************************\nWebmin uses its own password protected web server to provide access to the administration programs. The setup script needs to know <span class=\"token builtin class-name\">:</span>\n- What port to run the web server on. There must not be another web server already using this port.\n- The login name required to access the web server.\n- The password required to access the web server.\n- If the webserver should use SSL <span class=\"token punctuation\">(</span>if your system supports it<span class=\"token punctuation\">)</span>.\n- Whether to start webmin at boot time.\n\nWeb server port <span class=\"token punctuation\">(</span>default <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>:\n<span class=\"token comment\">#指定Webmin监听的端口 ,直接回车,默认选定10000</span>\nLogin name <span class=\"token punctuation\">(</span>default admin<span class=\"token punctuation\">)</span>:admin\n<span class=\"token comment\">#输入登录Webmin的用户名</span>\nLogin password:\nPassword again:\n<span class=\"token comment\">#输入登录密码</span>\nThe Perl SSLeay library is not installed. SSL not available.\n■apache默认没有启动SSL功能,所以SSL没有被激活\nStart Webmin at boot <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span>y/n<span class=\"token punctuation\">)</span>:y\n尊是否在开机的同时启动Webmin\n<span class=\"token punctuation\">..</span>.安装过程省略<span class=\"token punctuation\">..</span>.\nWebmin has been installed and started successfully. Use your web browser to go to\n\nhttp://localhost:10000/ \n\nand login with the name and password you entered previously.\n<span class=\"token comment\">#安装完成</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","feature":true,"text":"第三章 软件包安装一、 软件包分类1、 软件包分类 源码包 二进制包（脚本安装包）2、源码包2.1 源码包什么样 [root@localhost~]# vim hello.c #include &lt;stdio.h> int main (void) printf (\"hello...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"Linux","slug":"Linux","count":4,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">第三章 软件包安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81-%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">一、 软件包分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81-%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1、 软件包分类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%BA%90%E7%A0%81%E5%8C%85\"><span class=\"toc-text\">2、源码包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E6%BA%90%E7%A0%81%E5%8C%85%E4%BB%80%E4%B9%88%E6%A0%B7\"><span class=\"toc-text\">2.1 源码包什么样</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E6%BA%90%E7%A0%81%E5%8C%85%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">2.2 源码包特点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85\"><span class=\"toc-text\">3、二进制包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">3.1 二进制包分类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">3.2 特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-RPM%E5%8C%85%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">3.3 RPM包依赖</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81-rpm%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">二、 rpm安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81rpm%E5%8C%85%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">1、rpm包命名规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E4%BE%9D%E8%B5%96%E6%80%A7\"><span class=\"toc-text\">2、依赖性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81rpm%E5%8C%85%E6%89%8B%E5%B7%A5%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%9D\"><span class=\"toc-text\">3、rpm包手工命令安裝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E9%BB%98%E8%AE%A4%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">3.1 默认安装位置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-RPM-%E5%8C%85%E5%AE%89%E8%A3%9D\"><span class=\"toc-text\">3.2 RPM 包安裝</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-RPM-%E5%8C%85%E5%8D%87%E7%BA%A7\"><span class=\"toc-text\">3.3 RPM 包升级</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E5%8D%B8%E8%BD%BD\"><span class=\"toc-text\">3.4 卸载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">3.5 查询</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">3.6 验证</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6\"><span class=\"toc-text\">3.7 数字证书</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-8-RPM%E5%8C%85%E4%B8%AD%E6%96%87%E4%BB%B6%E7%9A%84%E6%8F%90%E5%8F%96\"><span class=\"toc-text\">3.8 RPM包中文件的提取</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81rpm%E5%8C%85%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85%EF%BC%88yum%E5%AE%89%E8%A3%85%EF%BC%89\"><span class=\"toc-text\">4、rpm包在线安装（yum安装）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-yum%E6%BA%90%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">4.1 yum源文件解析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%85%89%E7%9B%98yum%E6%BA%90\"><span class=\"toc-text\">4.2 搭建本地光盘yum源</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-yum%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">4.3 yum命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-yum%E7%BB%84%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">4.4 yum组管理命令</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%BA%90%E7%A0%81%E5%8C%85%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">三、源码包安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">1、注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%BA%94%E8%AF%A5%E9%80%89%E6%8B%A9%E5%93%AA%E7%A7%8D%E8%BD%AF%E4%BB%B6%E5%8C%85%EF%BC%9F\"><span class=\"toc-text\">1.1 应该选择哪种软件包？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E6%BA%90%E7%A0%81%E5%8C%85%E6%98%AF%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">1.2 源码包是从哪里来的？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%8D%B3%E5%AE%89%E8%A3%85rpm%E5%8C%85%E7%9A%84Apache-%E5%8F%88%E5%AE%89%E8%A3%85%E6%BA%90%E7%A0%81%E5%8C%85%E7%9A%84Apache\"><span class=\"toc-text\">1.3 是否可以在系统中即安装rpm包的Apache,又安装源码包的Apache?</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-%E7%94%9F%E4%BA%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%8C%E6%98%AF%E5%90%A6%E4%BC%9A%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85%E4%B8%A4%E7%A7%8DApache\"><span class=\"toc-text\">1.4 生产服务器上，是否会同时安装两种Apache?</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">2、安装过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">3、删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%89%93%E5%85%A5%E8%A1%A5%E4%B8%81\"><span class=\"toc-text\">4、打入补丁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E8%A1%A5%E4%B8%81%E7%9A%84%E7%94%9F%E6%88%90\"><span class=\"toc-text\">4.1 补丁的生成</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E6%89%93%E5%85%A5%E8%A1%A5%E4%B8%81\"><span class=\"toc-text\">4.2 打入补丁</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"mapped":true,"prev_post":{"title":"Java泛型学习笔记","uid":"62d0949e8eed72da6db7f84008a4bde1","slug":"Java/泛型","date":"2023-01-23T07:33:12.000Z","updated":"2023-02-12T04:13:23.190Z","comments":true,"path":"api/articles/Java/泛型.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVO-6GCp-41Pb5VAdprXFwlM.png","text":"Java泛型1、为什么要有泛型(Generic) 泛型：标签 举例：中药店，每个抽屉外面贴着标签,超市购物架上很多瓶子，每个瓶子裝的是什么，有标签 泛型的设计背景集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Java","slug":"Java","count":8,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"feature":true},"next_post":{"title":"Linux之vim编辑器","uid":"ed524054e4ea66ffb037d331f140784b","slug":"Linux/vim编辑器","date":"2023-01-04T12:46:00.000Z","updated":"2023-02-02T15:45:56.238Z","comments":true,"path":"api/articles/Linux/vim编辑器.json","keywords":null,"cover":"https://yimoorua-img.oss-cn-chengdu.aliyuncs.com/images/AgAAC6u-TVPCPNkBPLtLtZ8Uit4WUcTR.png","text":"第二章 vim编辑器一、vi编辑器简介vim 是一个全屏幕纯文本编辑器，是vi编辑器的增强版，我们主要讲解的是 vim 编辑器。可以利用别名让输入vi 命令的时候，实际上执行 vim编辑器，例如： [root@localhost ~]# alias vi='vim' #定义别名 ...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"Linux","slug":"Linux","count":4,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"}],"author":{"name":"YimooRua","slug":"blog-author","avatar":"/static/img/avator.gif","link":"/","description":"这是一个知识分享博客🎉，有什么建议请留言。欢迎探讨技术😁。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/static/img/svg/bilibili-line.svg","link":"https://space.bilibili.com/242073282"},"github":{"icon":"/static/img/svg/github.svg","link":"https://github.com/YimooR"},"csdn":{"icon":"/static/img/svg/csdn.svg","link":"https://blog.csdn.net/weixin_43143863?spm=1000.2115.3001.5343"},"qq":{"icon":"/static/img/svg/qq.svg","link":"https://user.qzone.qq.com/1035605573"}}}},"feature":true}}